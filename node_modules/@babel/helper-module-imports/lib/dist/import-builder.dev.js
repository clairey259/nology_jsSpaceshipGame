"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _assert = require("assert");

var _t = require("@babel/types");

var callExpression = _t.callExpression,
    cloneNode = _t.cloneNode,
    expressionStatement = _t.expressionStatement,
    identifier = _t.identifier,
    importDeclaration = _t.importDeclaration,
    importDefaultSpecifier = _t.importDefaultSpecifier,
    importNamespaceSpecifier = _t.importNamespaceSpecifier,
    importSpecifier = _t.importSpecifier,
    memberExpression = _t.memberExpression,
    stringLiteral = _t.stringLiteral,
    variableDeclaration = _t.variableDeclaration,
    variableDeclarator = _t.variableDeclarator;

var ImportBuilder =
/*#__PURE__*/
function () {
  function ImportBuilder(importedSource, scope, hub) {
    _classCallCheck(this, ImportBuilder);

    this._statements = [];
    this._resultName = null;
    this._importedSource = void 0;
    this._scope = scope;
    this._hub = hub;
    this._importedSource = importedSource;
  }

  _createClass(ImportBuilder, [{
    key: "done",
    value: function done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
  }, {
    key: "import",
    value: function _import() {
      this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));

      return this;
    }
  }, {
    key: "require",
    value: function require() {
      this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)])));

      return this;
    }
  }, {
    key: "namespace",
    value: function namespace() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "namespace";

      var local = this._scope.generateUidIdentifier(name);

      var statement = this._statements[this._statements.length - 1];

      _assert(statement.type === "ImportDeclaration");

      _assert(statement.specifiers.length === 0);

      statement.specifiers = [importNamespaceSpecifier(local)];
      this._resultName = cloneNode(local);
      return this;
    }
  }, {
    key: "default",
    value: function _default(name) {
      var id = this._scope.generateUidIdentifier(name);

      var statement = this._statements[this._statements.length - 1];

      _assert(statement.type === "ImportDeclaration");

      _assert(statement.specifiers.length === 0);

      statement.specifiers = [importDefaultSpecifier(id)];
      this._resultName = cloneNode(id);
      return this;
    }
  }, {
    key: "named",
    value: function named(name, importName) {
      if (importName === "default") return this["default"](name);

      var id = this._scope.generateUidIdentifier(name);

      var statement = this._statements[this._statements.length - 1];

      _assert(statement.type === "ImportDeclaration");

      _assert(statement.specifiers.length === 0);

      statement.specifiers = [importSpecifier(id, identifier(importName))];
      this._resultName = cloneNode(id);
      return this;
    }
  }, {
    key: "var",
    value: function _var(name) {
      var id = this._scope.generateUidIdentifier(name);

      var statement = this._statements[this._statements.length - 1];

      if (statement.type !== "ExpressionStatement") {
        _assert(this._resultName);

        statement = expressionStatement(this._resultName);

        this._statements.push(statement);
      }

      this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]);
      this._resultName = cloneNode(id);
      return this;
    }
  }, {
    key: "defaultInterop",
    value: function defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
  }, {
    key: "wildcardInterop",
    value: function wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
  }, {
    key: "_interop",
    value: function _interop(callee) {
      var statement = this._statements[this._statements.length - 1];

      if (statement.type === "ExpressionStatement") {
        statement.expression = callExpression(callee, [statement.expression]);
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);

        statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);
      } else {
        _assert.fail("Unexpected type.");
      }

      return this;
    }
  }, {
    key: "prop",
    value: function prop(name) {
      var statement = this._statements[this._statements.length - 1];

      if (statement.type === "ExpressionStatement") {
        statement.expression = memberExpression(statement.expression, identifier(name));
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);

        statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));
      } else {
        _assert.fail("Unexpected type:" + statement.type);
      }

      return this;
    }
  }, {
    key: "read",
    value: function read(name) {
      this._resultName = memberExpression(this._resultName, identifier(name));
    }
  }]);

  return ImportBuilder;
}();

exports["default"] = ImportBuilder;