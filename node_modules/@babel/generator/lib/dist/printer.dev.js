"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _buffer = require("./buffer");

var n = require("./node");

var generatorFunctions = require("./generators");

var SCIENTIFIC_NOTATION = /e/i;
var ZERO_DECIMAL_INTEGER = /\.0+$/;
var NON_DECIMAL_LITERAL = /^0[box]/;
var PURE_ANNOTATION_RE = /^\s*[@#]__PURE__\s*$/;
var needsParens = n.needsParens,
    needsWhitespaceAfter = n.needsWhitespaceAfter,
    needsWhitespaceBefore = n.needsWhitespaceBefore;

var Printer =
/*#__PURE__*/
function () {
  function Printer(format, map) {
    _classCallCheck(this, Printer);

    this.inForStatementInitCounter = 0;
    this._printStack = [];
    this._indent = 0;
    this._indentChar = 0;
    this._indentRepeat = 0;
    this._insideAux = false;
    this._parenPushNewlineState = null;
    this._noLineTerminator = false;
    this._printAuxAfterOnNextUserNode = false;
    this._printedComments = new Set();
    this._endsWithInteger = false;
    this._endsWithWord = false;
    this.format = format;
    this._buf = new _buffer["default"](map);
    this._indentChar = format.indent.style.charCodeAt(0);
    this._indentRepeat = format.indent.style.length;
  }

  _createClass(Printer, [{
    key: "generate",
    value: function generate(ast) {
      this.print(ast);

      this._maybeAddAuxComment();

      return this._buf.get();
    }
  }, {
    key: "indent",
    value: function indent() {
      if (this.format.compact || this.format.concise) return;
      this._indent++;
    }
  }, {
    key: "dedent",
    value: function dedent() {
      if (this.format.compact || this.format.concise) return;
      this._indent--;
    }
  }, {
    key: "semicolon",
    value: function semicolon() {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this._maybeAddAuxComment();

      if (force) {
        this._appendChar(59);
      } else {
        this._queue(59);
      }
    }
  }, {
    key: "rightBrace",
    value: function rightBrace() {
      if (this.format.minified) {
        this._buf.removeLastSemicolon();
      }

      this.tokenChar(125);
    }
  }, {
    key: "space",
    value: function space() {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (this.format.compact) return;

      if (force) {
        this._space();
      } else if (this._buf.hasContent()) {
        var lastCp = this.getLastChar();

        if (lastCp !== 32 && lastCp !== 10) {
          this._space();
        }
      }
    }
  }, {
    key: "word",
    value: function word(str) {
      if (this._endsWithWord || str.charCodeAt(0) === 47 && this.endsWith(47)) {
        this._space();
      }

      this._maybeAddAuxComment();

      this._append(str, false);

      this._endsWithWord = true;
    }
  }, {
    key: "number",
    value: function number(str) {
      this.word(str);
      this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
    }
  }, {
    key: "token",
    value: function token(str) {
      var maybeNewline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var lastChar = this.getLastChar();
      var strFirst = str.charCodeAt(0);

      if (lastChar === 33 && str === "--" || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {
        this._space();
      }

      this._maybeAddAuxComment();

      this._append(str, maybeNewline);
    }
  }, {
    key: "tokenChar",
    value: function tokenChar(_char) {
      var lastChar = this.getLastChar();

      if (_char === 43 && lastChar === 43 || _char === 45 && lastChar === 45 || _char === 46 && this._endsWithInteger) {
        this._space();
      }

      this._maybeAddAuxComment();

      this._appendChar(_char);
    }
  }, {
    key: "newline",
    value: function newline() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      if (this.format.retainLines || this.format.compact) return;

      if (this.format.concise) {
        this.space();
        return;
      }

      var charBeforeNewline = this.endsWithCharAndNewline();
      if (charBeforeNewline === 10) return;

      if (charBeforeNewline === 123 || charBeforeNewline === 58) {
        i--;
      }

      if (i <= 0) return;

      for (var j = 0; j < i; j++) {
        this._newline();
      }
    }
  }, {
    key: "endsWith",
    value: function endsWith(_char2) {
      return this.getLastChar() === _char2;
    }
  }, {
    key: "getLastChar",
    value: function getLastChar() {
      return this._buf.getLastChar();
    }
  }, {
    key: "endsWithCharAndNewline",
    value: function endsWithCharAndNewline() {
      return this._buf.endsWithCharAndNewline();
    }
  }, {
    key: "removeTrailingNewline",
    value: function removeTrailingNewline() {
      this._buf.removeTrailingNewline();
    }
  }, {
    key: "exactSource",
    value: function exactSource(loc, cb) {
      this._catchUp("start", loc);

      this._buf.exactSource(loc, cb);
    }
  }, {
    key: "source",
    value: function source(prop, loc) {
      this._catchUp(prop, loc);

      this._buf.source(prop, loc);
    }
  }, {
    key: "withSource",
    value: function withSource(prop, loc, cb) {
      this._catchUp(prop, loc);

      this._buf.withSource(prop, loc, cb);
    }
  }, {
    key: "_space",
    value: function _space() {
      this._queue(32);
    }
  }, {
    key: "_newline",
    value: function _newline() {
      this._queue(10);
    }
  }, {
    key: "_append",
    value: function _append(str, maybeNewline) {
      this._maybeAddParen(str);

      this._maybeIndent(str.charCodeAt(0));

      this._buf.append(str, maybeNewline);

      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
  }, {
    key: "_appendChar",
    value: function _appendChar(_char3) {
      this._maybeAddParenChar(_char3);

      this._maybeIndent(_char3);

      this._buf.appendChar(_char3);

      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
  }, {
    key: "_queue",
    value: function _queue(_char4) {
      this._maybeAddParenChar(_char4);

      this._maybeIndent(_char4);

      this._buf.queue(_char4);

      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
  }, {
    key: "_maybeIndent",
    value: function _maybeIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        this._buf.queueIndentation(this._indentChar, this._getIndent());
      }
    }
  }, {
    key: "_maybeAddParenChar",
    value: function _maybeAddParenChar(_char5) {
      var parenPushNewlineState = this._parenPushNewlineState;
      if (!parenPushNewlineState) return;

      if (_char5 === 32) {
        return;
      }

      if (_char5 !== 10) {
        this._parenPushNewlineState = null;
        return;
      }

      this.tokenChar(40);
      this.indent();
      parenPushNewlineState.printed = true;
    }
  }, {
    key: "_maybeAddParen",
    value: function _maybeAddParen(str) {
      var parenPushNewlineState = this._parenPushNewlineState;
      if (!parenPushNewlineState) return;
      var len = str.length;
      var i;

      for (i = 0; i < len && str.charCodeAt(i) === 32; i++) {
        continue;
      }

      if (i === len) {
        return;
      }

      var cha = str.charCodeAt(i);

      if (cha !== 10) {
        if (cha !== 47 || i + 1 === len) {
          this._parenPushNewlineState = null;
          return;
        }

        var chaPost = str.charCodeAt(i + 1);

        if (chaPost === 42) {
          if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2))) {
            return;
          }
        } else if (chaPost !== 47) {
          this._parenPushNewlineState = null;
          return;
        }
      }

      this.tokenChar(40);
      this.indent();
      parenPushNewlineState.printed = true;
    }
  }, {
    key: "_catchUp",
    value: function _catchUp(prop, loc) {
      if (!this.format.retainLines) return;
      var pos = loc ? loc[prop] : null;

      if ((pos == null ? void 0 : pos.line) != null) {
        var count = pos.line - this._buf.getCurrentLine();

        for (var i = 0; i < count; i++) {
          this._newline();
        }
      }
    }
  }, {
    key: "_getIndent",
    value: function _getIndent() {
      return this._indentRepeat * this._indent;
    }
  }, {
    key: "printTerminatorless",
    value: function printTerminatorless(node, parent, isLabel) {
      if (isLabel) {
        this._noLineTerminator = true;
        this.print(node, parent);
        this._noLineTerminator = false;
      } else {
        var terminatorState = {
          printed: false
        };
        this._parenPushNewlineState = terminatorState;
        this.print(node, parent);

        if (terminatorState.printed) {
          this.dedent();
          this.newline();
          this.tokenChar(41);
        }
      }
    }
  }, {
    key: "print",
    value: function print(node, parent, noLineTerminator) {
      if (!node) return;
      var nodeType = node.type;
      var format = this.format;
      var oldConcise = format.concise;

      if (node._compact) {
        format.concise = true;
      }

      var printMethod = this[nodeType];

      if (printMethod === undefined) {
        throw new ReferenceError("unknown node of type ".concat(JSON.stringify(nodeType), " with constructor ").concat(JSON.stringify(node.constructor.name)));
      }

      this._printStack.push(node);

      var oldInAux = this._insideAux;
      this._insideAux = node.loc == undefined;

      this._maybeAddAuxComment(this._insideAux && !oldInAux);

      var shouldPrintParens;

      if (format.retainFunctionParens && nodeType === "FunctionExpression" && node.extra && node.extra.parenthesized) {
        shouldPrintParens = true;
      } else {
        shouldPrintParens = needsParens(node, parent, this._printStack);
      }

      if (shouldPrintParens) this.tokenChar(40);

      this._printLeadingComments(node);

      var loc = nodeType === "Program" || nodeType === "File" ? null : node.loc;
      this.withSource("start", loc, printMethod.bind(this, node, parent));

      if (noLineTerminator && !this._noLineTerminator) {
        this._noLineTerminator = true;

        this._printTrailingComments(node);

        this._noLineTerminator = false;
      } else {
        this._printTrailingComments(node);
      }

      if (shouldPrintParens) this.tokenChar(41);

      this._printStack.pop();

      format.concise = oldConcise;
      this._insideAux = oldInAux;
    }
  }, {
    key: "_maybeAddAuxComment",
    value: function _maybeAddAuxComment(enteredPositionlessNode) {
      if (enteredPositionlessNode) this._printAuxBeforeComment();
      if (!this._insideAux) this._printAuxAfterComment();
    }
  }, {
    key: "_printAuxBeforeComment",
    value: function _printAuxBeforeComment() {
      if (this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = true;
      var comment = this.format.auxiliaryCommentBefore;

      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        });
      }
    }
  }, {
    key: "_printAuxAfterComment",
    value: function _printAuxAfterComment() {
      if (!this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = false;
      var comment = this.format.auxiliaryCommentAfter;

      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        });
      }
    }
  }, {
    key: "getPossibleRaw",
    value: function getPossibleRaw(node) {
      var extra = node.extra;

      if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
        return extra.raw;
      }
    }
  }, {
    key: "printJoin",
    value: function printJoin(nodes, parent) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (!(nodes != null && nodes.length)) return;
      if (opts.indent) this.indent();
      var newlineOpts = {
        addNewlines: opts.addNewlines
      };
      var len = nodes.length;

      for (var i = 0; i < len; i++) {
        var node = nodes[i];
        if (!node) continue;
        if (opts.statement) this._printNewline(true, node, parent, newlineOpts);
        this.print(node, parent);

        if (opts.iterator) {
          opts.iterator(node, i);
        }

        if (opts.separator && i < len - 1) {
          opts.separator.call(this);
        }

        if (opts.statement) this._printNewline(false, node, parent, newlineOpts);
      }

      if (opts.indent) this.dedent();
    }
  }, {
    key: "printAndIndentOnComments",
    value: function printAndIndentOnComments(node, parent) {
      var indent = node.leadingComments && node.leadingComments.length > 0;
      if (indent) this.indent();
      this.print(node, parent);
      if (indent) this.dedent();
    }
  }, {
    key: "printBlock",
    value: function printBlock(parent) {
      var node = parent.body;

      if (node.type !== "EmptyStatement") {
        this.space();
      }

      this.print(node, parent);
    }
  }, {
    key: "_printTrailingComments",
    value: function _printTrailingComments(node) {
      this._printComments(this._getComments(false, node));
    }
  }, {
    key: "_printLeadingComments",
    value: function _printLeadingComments(node) {
      this._printComments(this._getComments(true, node), true);
    }
  }, {
    key: "printInnerComments",
    value: function printInnerComments(node) {
      var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var _node$innerComments;

      if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;
      if (indent) this.indent();

      this._printComments(node.innerComments);

      if (indent) this.dedent();
    }
  }, {
    key: "printSequence",
    value: function printSequence(nodes, parent) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      opts.statement = true;
      return this.printJoin(nodes, parent, opts);
    }
  }, {
    key: "printList",
    value: function printList(items, parent) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (opts.separator == null) {
        opts.separator = commaSeparator;
      }

      return this.printJoin(items, parent, opts);
    }
  }, {
    key: "_printNewline",
    value: function _printNewline(leading, node, parent, opts) {
      if (this.format.retainLines || this.format.compact) return;

      if (this.format.concise) {
        this.space();
        return;
      }

      var lines = 0;

      if (this._buf.hasContent()) {
        if (!leading) lines++;
        if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;
        var needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;
        if (needs(node, parent)) lines++;
      }

      this.newline(Math.min(2, lines));
    }
  }, {
    key: "_getComments",
    value: function _getComments(leading, node) {
      return node && (leading ? node.leadingComments : node.trailingComments) || null;
    }
  }, {
    key: "_printComment",
    value: function _printComment(comment, skipNewLines) {
      if (comment.ignore) return;
      if (this._printedComments.has(comment)) return;
      if (!this.format.shouldPrintComment(comment.value)) return;

      this._printedComments.add(comment);

      var isBlockComment = comment.type === "CommentBlock";
      var printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;
      if (printNewLines && this._buf.hasContent()) this.newline(1);
      var lastCharCode = this.getLastChar();

      if (lastCharCode !== 91 && lastCharCode !== 123) {
        this.space();
      }

      var val;
      var maybeNewline = false;

      if (isBlockComment) {
        val = "/*".concat(comment.value, "*/");

        if (this.format.indent.adjustMultilineComment) {
          var _comment$loc;

          var offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;

          if (offset) {
            var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
            val = val.replace(newlineRegex, "\n");
          }

          var indentSize = Math.max(this._getIndent(), this.format.retainLines ? 0 : this._buf.getCurrentColumn());
          val = val.replace(/\n(?!$)/g, "\n".concat(" ".repeat(indentSize)));
          maybeNewline = true;
        }
      } else if (!this._noLineTerminator) {
        val = "//".concat(comment.value, "\n");
        maybeNewline = true;
      } else {
        val = "/*".concat(comment.value, "*/");
      }

      if (this.endsWith(47)) this._space();
      this.withSource("start", comment.loc, this._append.bind(this, val, maybeNewline));
      if (printNewLines) this.newline(1);
    }
  }, {
    key: "_printComments",
    value: function _printComments(comments, inlinePureAnnotation) {
      if (!(comments != null && comments.length)) return;

      if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {
        this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));
      } else {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = comments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var comment = _step.value;

            this._printComment(comment);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: "printAssertions",
    value: function printAssertions(node) {
      var _node$assertions;

      if ((_node$assertions = node.assertions) != null && _node$assertions.length) {
        this.space();
        this.word("assert");
        this.space();
        this.tokenChar(123);
        this.space();
        this.printList(node.assertions, node);
        this.space();
        this.tokenChar(125);
      }
    }
  }]);

  return Printer;
}();

Object.assign(Printer.prototype, generatorFunctions);
{
  Printer.prototype.Noop = function Noop() {};
}
var _default = Printer;
exports["default"] = _default;

function commaSeparator() {
  this.tokenChar(44);
  this.space();
}