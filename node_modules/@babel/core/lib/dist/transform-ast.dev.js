"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformFromAst = void 0;
exports.transformFromAstAsync = transformFromAstAsync;
exports.transformFromAstSync = transformFromAstSync;

function _gensync() {
  var data = require("gensync");

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _config = require("./config");

var _transformation = require("./transformation");

var _rewriteStackTrace = require("./errors/rewrite-stack-trace");

var transformFromAstRunner = _gensync()(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee(ast, code, opts) {
  var config;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield((0, _config["default"])(opts), "t0", 1);

        case 1:
          config = _context.t0;

          if (!(config === null)) {
            _context.next = 4;
            break;
          }

          return _context.abrupt("return", null);

        case 4:
          if (ast) {
            _context.next = 6;
            break;
          }

          throw new Error("No AST given");

        case 6:
          return _context.delegateYield((0, _transformation.run)(config, code, ast), "t1", 7);

        case 7:
          return _context.abrupt("return", _context.t1);

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

var transformFromAst = function transformFromAst(ast, code, optsOrCallback, maybeCallback) {
  var opts;
  var callback;

  if (typeof optsOrCallback === "function") {
    callback = optsOrCallback;
    opts = undefined;
  } else {
    opts = optsOrCallback;
    callback = maybeCallback;
  }

  if (callback === undefined) {
    {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
    }
  }

  (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
};

exports.transformFromAst = transformFromAst;

function transformFromAstSync() {
  return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync).apply(void 0, arguments);
}

function transformFromAstAsync() {
  return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async).apply(void 0, arguments);
}

0 && 0;