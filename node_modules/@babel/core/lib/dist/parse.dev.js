"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = void 0;
exports.parseAsync = parseAsync;
exports.parseSync = parseSync;

function _gensync() {
  var data = require("gensync");

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _config = require("./config");

var _parser = require("./parser");

var _normalizeOpts = require("./transformation/normalize-opts");

var _rewriteStackTrace = require("./errors/rewrite-stack-trace");

var parseRunner = _gensync()(
/*#__PURE__*/
regeneratorRuntime.mark(function parse(code, opts) {
  var config;
  return regeneratorRuntime.wrap(function parse$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield((0, _config["default"])(opts), "t0", 1);

        case 1:
          config = _context.t0;

          if (!(config === null)) {
            _context.next = 4;
            break;
          }

          return _context.abrupt("return", null);

        case 4:
          return _context.delegateYield((0, _parser["default"])(config.passes, (0, _normalizeOpts["default"])(config), code), "t1", 5);

        case 5:
          return _context.abrupt("return", _context.t1);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, parse);
}));

var parse = function parse(code, opts, callback) {
  if (typeof opts === "function") {
    callback = opts;
    opts = undefined;
  }

  if (callback === undefined) {
    {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
    }
  }

  (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
};

exports.parse = parse;

function parseSync() {
  return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync).apply(void 0, arguments);
}

function parseAsync() {
  return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async).apply(void 0, arguments);
}

0 && 0;