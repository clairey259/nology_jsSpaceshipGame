"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformFile = transformFile;
exports.transformFileAsync = transformFileAsync;
exports.transformFileSync = transformFileSync;

function _gensync() {
  var data = require("gensync");

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _config = require("./config");

var _transformation = require("./transformation");

var fs = require("./gensync-utils/fs");

({});

var transformFileRunner = _gensync()(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee(filename, opts) {
  var options, config, code;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = Object.assign({}, opts, {
            filename: filename
          });
          return _context.delegateYield((0, _config["default"])(options), "t0", 2);

        case 2:
          config = _context.t0;

          if (!(config === null)) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return", null);

        case 5:
          return _context.delegateYield(fs.readFile(filename, "utf8"), "t1", 6);

        case 6:
          code = _context.t1;
          return _context.delegateYield((0, _transformation.run)(config, code), "t2", 8);

        case 8:
          return _context.abrupt("return", _context.t2);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

function transformFile() {
  return transformFileRunner.errback.apply(transformFileRunner, arguments);
}

function transformFileSync() {
  return transformFileRunner.sync.apply(transformFileRunner, arguments);
}

function transformFileAsync() {
  return transformFileRunner.async.apply(transformFileRunner, arguments);
}

0 && 0;