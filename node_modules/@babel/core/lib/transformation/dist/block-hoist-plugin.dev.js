"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = loadBlockHoistPlugin;

function _traverse() {
  var data = require("@babel/traverse");

  _traverse = function _traverse() {
    return data;
  };

  return data;
}

var _plugin = require("../config/plugin");

var LOADED_PLUGIN;

function loadBlockHoistPlugin() {
  if (!LOADED_PLUGIN) {
    LOADED_PLUGIN = new _plugin["default"](Object.assign({}, blockHoistPlugin, {
      visitor: _traverse()["default"].explode(blockHoistPlugin.visitor)
    }), {});
  }

  return LOADED_PLUGIN;
}

function priority(bodyNode) {
  var priority = bodyNode == null ? void 0 : bodyNode._blockHoist;
  if (priority == null) return 1;
  if (priority === true) return 2;
  return priority;
}

function stableSort(body) {
  var buckets = Object.create(null);

  for (var i = 0; i < body.length; i++) {
    var n = body[i];
    var p = priority(n);
    var bucket = buckets[p] || (buckets[p] = []);
    bucket.push(n);
  }

  var keys = Object.keys(buckets).map(function (k) {
    return +k;
  }).sort(function (a, b) {
    return b - a;
  });
  var index = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;
      var _bucket = buckets[key];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = _bucket[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _n = _step2.value;
          body[index++] = _n;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return body;
}

var blockHoistPlugin = {
  name: "internal.blockHoist",
  visitor: {
    Block: {
      exit: function exit(_ref) {
        var node = _ref.node;
        var body = node.body;
        var max = Math.pow(2, 30) - 1;
        var hasChange = false;

        for (var i = 0; i < body.length; i++) {
          var n = body[i];
          var p = priority(n);

          if (p > max) {
            hasChange = true;
            break;
          }

          max = p;
        }

        if (!hasChange) return;
        node.body = stableSort(body.slice());
      }
    }
  }
};
0 && 0;