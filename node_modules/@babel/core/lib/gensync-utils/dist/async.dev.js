"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forwardAsync = forwardAsync;
exports.isAsync = void 0;
exports.isThenable = isThenable;
exports.maybeAsync = maybeAsync;
exports.waitFor = exports.onFirstPause = void 0;

function _gensync() {
  var data = require("gensync");

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var runGenerator = _gensync()(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee(item) {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield(item, "t0", 1);

        case 1:
          return _context.abrupt("return", _context.t0);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

var isAsync = _gensync()({
  sync: function sync() {
    return false;
  },
  errback: function errback(cb) {
    return cb(null, true);
  }
});

exports.isAsync = isAsync;

function maybeAsync(fn, message) {
  return _gensync()({
    sync: function sync() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var result = fn.apply(this, args);
      if (isThenable(result)) throw new Error(message);
      return result;
    },
    async: function async() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return Promise.resolve(fn.apply(this, args));
    }
  });
}

var withKind = _gensync()({
  sync: function sync(cb) {
    return cb("sync");
  },
  async: function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(cb) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", cb("async"));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function async(_x) {
      return _ref.apply(this, arguments);
    };
  }()
});

function forwardAsync(action, cb) {
  var g = _gensync()(action);

  return withKind(function (kind) {
    var adapted = g[kind];
    return cb(adapted);
  });
}

var onFirstPause = _gensync()({
  name: "onFirstPause",
  arity: 2,
  sync: function sync(item) {
    return runGenerator.sync(item);
  },
  errback: function errback(item, firstPause, cb) {
    var completed = false;
    runGenerator.errback(item, function (err, value) {
      completed = true;
      cb(err, value);
    });

    if (!completed) {
      firstPause();
    }
  }
});

exports.onFirstPause = onFirstPause;

var waitFor = _gensync()({
  sync: function sync(x) {
    return x;
  },
  async: function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(x) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", x);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function async(_x2) {
      return _ref2.apply(this, arguments);
    };
  }()
});

exports.waitFor = waitFor;

function isThenable(val) {
  return !!val && (_typeof(val) === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
}

0 && 0;