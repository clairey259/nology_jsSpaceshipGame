"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

function helpers() {
  var data = require("@babel/helpers");

  helpers = function helpers() {
    return data;
  };

  return data;
}

function _generator() {
  var data = require("@babel/generator");

  _generator = function _generator() {
    return data;
  };

  return data;
}

function _template() {
  var data = require("@babel/template");

  _template = function _template() {
    return data;
  };

  return data;
}

function _t() {
  var data = require("@babel/types");

  _t = function _t() {
    return data;
  };

  return data;
}

var _file = require("../transformation/file/file");

var _t2 = _t(),
    arrayExpression = _t2.arrayExpression,
    assignmentExpression = _t2.assignmentExpression,
    binaryExpression = _t2.binaryExpression,
    blockStatement = _t2.blockStatement,
    callExpression = _t2.callExpression,
    cloneNode = _t2.cloneNode,
    conditionalExpression = _t2.conditionalExpression,
    exportNamedDeclaration = _t2.exportNamedDeclaration,
    exportSpecifier = _t2.exportSpecifier,
    expressionStatement = _t2.expressionStatement,
    functionExpression = _t2.functionExpression,
    identifier = _t2.identifier,
    memberExpression = _t2.memberExpression,
    objectExpression = _t2.objectExpression,
    program = _t2.program,
    stringLiteral = _t2.stringLiteral,
    unaryExpression = _t2.unaryExpression,
    variableDeclaration = _t2.variableDeclaration,
    variableDeclarator = _t2.variableDeclarator;

var buildUmdWrapper = function buildUmdWrapper(replacements) {
  return _template()["default"].statement(_templateObject())(replacements);
};

function buildGlobal(allowlist) {
  var namespace = identifier("babelHelpers");
  var body = [];
  var container = functionExpression(null, [identifier("global")], blockStatement(body));
  var tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
  body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))]));
  buildHelpers(body, namespace, allowlist);
  return tree;
}

function buildModule(allowlist) {
  var body = [];
  var refs = buildHelpers(body, null, allowlist);
  body.unshift(exportNamedDeclaration(null, Object.keys(refs).map(function (name) {
    return exportSpecifier(cloneNode(refs[name]), identifier(name));
  })));
  return program(body, [], "module");
}

function buildUmd(allowlist) {
  var namespace = identifier("babelHelpers");
  var body = [];
  body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))]));
  buildHelpers(body, namespace, allowlist);
  return program([buildUmdWrapper({
    FACTORY_PARAMETERS: identifier("global"),
    BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])),
    COMMON_ARGUMENTS: identifier("exports"),
    AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]),
    FACTORY_BODY: body,
    UMD_ROOT: identifier("this")
  })]);
}

function buildVar(allowlist) {
  var namespace = identifier("babelHelpers");
  var body = [];
  body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
  var tree = program(body);
  buildHelpers(body, namespace, allowlist);
  body.push(expressionStatement(namespace));
  return tree;
}

function buildHelpers(body, namespace, allowlist) {
  var getHelperReference = function getHelperReference(name) {
    return namespace ? memberExpression(namespace, identifier(name)) : identifier("_".concat(name));
  };

  var refs = {};
  helpers().list.forEach(function (name) {
    if (allowlist && allowlist.indexOf(name) < 0) return;
    var ref = refs[name] = getHelperReference(name);
    helpers().ensure(name, _file["default"]);

    var _helpers$get = helpers().get(name, getHelperReference, ref),
        nodes = _helpers$get.nodes;

    body.push.apply(body, _toConsumableArray(nodes));
  });
  return refs;
}

function _default(allowlist) {
  var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "global";
  var tree;
  var build = {
    global: buildGlobal,
    module: buildModule,
    umd: buildUmd,
    "var": buildVar
  }[outputType];

  if (build) {
    tree = build(allowlist);
  } else {
    throw new Error("Unsupported output type ".concat(outputType));
  }

  return (0, _generator()["default"])(tree).code;
}

0 && 0;