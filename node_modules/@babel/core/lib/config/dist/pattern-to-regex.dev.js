"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = pathToPattern;

function _path() {
  var data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

var sep = "\\".concat(_path().sep);
var endSep = "(?:".concat(sep, "|$)");
var substitution = "[^".concat(sep, "]+");
var starPat = "(?:".concat(substitution).concat(sep, ")");
var starPatLast = "(?:".concat(substitution).concat(endSep, ")");
var starStarPat = "".concat(starPat, "*?");
var starStarPatLast = "".concat(starPat, "*?").concat(starPatLast, "?");

function escapeRegExp(string) {
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
}

function pathToPattern(pattern, dirname) {
  var parts = _path().resolve(dirname, pattern).split(_path().sep);

  return new RegExp(["^"].concat(_toConsumableArray(parts.map(function (part, i) {
    var last = i === parts.length - 1;
    if (part === "**") return last ? starStarPatLast : starStarPat;
    if (part === "*") return last ? starPatLast : starPat;

    if (part.indexOf("*.") === 0) {
      return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);
    }

    return escapeRegExp(part) + (last ? endSep : sep);
  }))).join(""));
}

0 && 0;