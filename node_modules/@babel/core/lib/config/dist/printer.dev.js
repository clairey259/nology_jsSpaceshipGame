"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigPrinter = exports.ChainFormatter = void 0;

function _gensync() {
  var data = require("gensync");

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var ChainFormatter = {
  Programmatic: 0,
  Config: 1
};
exports.ChainFormatter = ChainFormatter;
var Formatter = {
  title: function title(type, callerName, filepath) {
    var title = "";

    if (type === ChainFormatter.Programmatic) {
      title = "programmatic options";

      if (callerName) {
        title += " from " + callerName;
      }
    } else {
      title = "config " + filepath;
    }

    return title;
  },
  loc: function loc(index, envName) {
    var loc = "";

    if (index != null) {
      loc += ".overrides[".concat(index, "]");
    }

    if (envName != null) {
      loc += ".env[\"".concat(envName, "\"]");
    }

    return loc;
  },
  optionsAndDescriptors:
  /*#__PURE__*/
  regeneratorRuntime.mark(function optionsAndDescriptors(opt) {
    var content, pluginDescriptors, presetDescriptors;
    return regeneratorRuntime.wrap(function optionsAndDescriptors$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            content = Object.assign({}, opt.options);
            delete content.overrides;
            delete content.env;
            _context.t0 = _toConsumableArray;
            return _context.delegateYield(opt.plugins(), "t1", 5);

          case 5:
            _context.t2 = _context.t1;
            pluginDescriptors = (0, _context.t0)(_context.t2);

            if (pluginDescriptors.length) {
              content.plugins = pluginDescriptors.map(function (d) {
                return descriptorToConfig(d);
              });
            }

            _context.t3 = _toConsumableArray;
            return _context.delegateYield(opt.presets(), "t4", 10);

          case 10:
            _context.t5 = _context.t4;
            presetDescriptors = (0, _context.t3)(_context.t5);

            if (presetDescriptors.length) {
              content.presets = _toConsumableArray(presetDescriptors).map(function (d) {
                return descriptorToConfig(d);
              });
            }

            return _context.abrupt("return", JSON.stringify(content, undefined, 2));

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, optionsAndDescriptors);
  })
};

function descriptorToConfig(d) {
  var _d$file;

  var name = (_d$file = d.file) == null ? void 0 : _d$file.request;

  if (name == null) {
    if (_typeof(d.value) === "object") {
      name = d.value;
    } else if (typeof d.value === "function") {
      name = "[Function: ".concat(d.value.toString().slice(0, 50), " ... ]");
    }
  }

  if (name == null) {
    name = "[Unknown]";
  }

  if (d.options === undefined) {
    return name;
  } else if (d.name == null) {
    return [name, d.options];
  } else {
    return [name, d.options, d.name];
  }
}

var ConfigPrinter =
/*#__PURE__*/
function () {
  function ConfigPrinter() {
    _classCallCheck(this, ConfigPrinter);

    this._stack = [];
  }

  _createClass(ConfigPrinter, [{
    key: "configure",
    value: function configure(enabled, type, _ref) {
      var _this = this;

      var callerName = _ref.callerName,
          filepath = _ref.filepath;
      if (!enabled) return function () {};
      return function (content, index, envName) {
        _this._stack.push({
          type: type,
          callerName: callerName,
          filepath: filepath,
          content: content,
          index: index,
          envName: envName
        });
      };
    }
  }, {
    key: "output",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function output() {
      var configs;
      return regeneratorRuntime.wrap(function output$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this._stack.length === 0)) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", "");

            case 2:
              return _context2.delegateYield(_gensync().all(this._stack.map(function (s) {
                return ConfigPrinter.format(s);
              })), "t0", 3);

            case 3:
              configs = _context2.t0;
              return _context2.abrupt("return", configs.join("\n\n"));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, output, this);
    })
  }], [{
    key: "format",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function format(config) {
      var title, loc, content;
      return regeneratorRuntime.wrap(function format$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              title = Formatter.title(config.type, config.callerName, config.filepath);
              loc = Formatter.loc(config.index, config.envName);
              if (loc) title += " ".concat(loc);
              return _context3.delegateYield(Formatter.optionsAndDescriptors(config.content), "t0", 4);

            case 4:
              content = _context3.t0;
              return _context3.abrupt("return", "".concat(title, "\n").concat(content));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, format);
    })
  }]);

  return ConfigPrinter;
}();

exports.ConfigPrinter = ConfigPrinter;
0 && 0;