"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(createConfigItem);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConfigItem = createConfigItem;
exports.createItemFromDescriptor = createItemFromDescriptor;
exports.getItemDescriptor = getItemDescriptor;

function _path() {
  var data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

var _configDescriptors = require("./config-descriptors");

function createItemFromDescriptor(desc) {
  return new ConfigItem(desc);
}

function createConfigItem(value) {
  var _ref,
      _ref$dirname,
      dirname,
      type,
      descriptor,
      _args = arguments;

  return regeneratorRuntime.wrap(function createConfigItem$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref$dirname = _ref.dirname, dirname = _ref$dirname === void 0 ? "." : _ref$dirname, type = _ref.type;
          return _context.delegateYield((0, _configDescriptors.createDescriptor)(value, _path().resolve(dirname), {
            type: type,
            alias: "programmatic item"
          }), "t0", 2);

        case 2:
          descriptor = _context.t0;
          return _context.abrupt("return", createItemFromDescriptor(descriptor));

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function getItemDescriptor(item) {
  if (item != null && item[CONFIG_ITEM_BRAND]) {
    return item._descriptor;
  }

  return undefined;
}

var CONFIG_ITEM_BRAND = Symbol["for"]("@babel/core@7 - ConfigItem");

var ConfigItem = function ConfigItem(descriptor) {
  _classCallCheck(this, ConfigItem);

  this._descriptor = void 0;
  this[CONFIG_ITEM_BRAND] = true;
  this.value = void 0;
  this.options = void 0;
  this.dirname = void 0;
  this.name = void 0;
  this.file = void 0;
  this._descriptor = descriptor;
  Object.defineProperty(this, "_descriptor", {
    enumerable: false
  });
  Object.defineProperty(this, CONFIG_ITEM_BRAND, {
    enumerable: false
  });
  this.value = this._descriptor.value;
  this.options = this._descriptor.options;
  this.dirname = this._descriptor.dirname;
  this.name = this._descriptor.name;
  this.file = this._descriptor.file ? {
    request: this._descriptor.file.request,
    resolved: this._descriptor.file.resolved
  } : undefined;
  Object.freeze(this);
};

Object.freeze(ConfigItem.prototype);
0 && 0;