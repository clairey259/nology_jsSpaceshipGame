"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(resolvePlugin),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(resolvePreset),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(loadPlugin),
    _marked4 =
/*#__PURE__*/
regeneratorRuntime.mark(loadPreset),
    _marked5 =
/*#__PURE__*/
regeneratorRuntime.mark(resolveAlternativesHelper),
    _marked6 =
/*#__PURE__*/
regeneratorRuntime.mark(requireModule);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadPlugin = loadPlugin;
exports.loadPreset = loadPreset;
exports.resolvePlugin = resolvePlugin;
exports.resolvePreset = resolvePreset;

function _debug() {
  var data = require("debug");

  _debug = function _debug() {
    return data;
  };

  return data;
}

function _path() {
  var data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _gensync() {
  var data = require("gensync");

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _async = require("../../gensync-utils/async");

var _moduleTypes = require("./module-types");

function _url() {
  var data = require("url");

  _url = function _url() {
    return data;
  };

  return data;
}

var _importMetaResolve = require("./import-meta-resolve");

function _module() {
  var data = require("module");

  _module = function _module() {
    return data;
  };

  return data;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var debug = _debug()("babel:config:loading:files:plugins");

var EXACT_RE = /^module:/;
var BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/;
var BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/;
var BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/;
var BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/;
var OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/;
var OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/;
var OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;

function resolvePlugin(name, dirname) {
  return regeneratorRuntime.wrap(function resolvePlugin$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield(resolveStandardizedName("plugin", name, dirname), "t0", 1);

        case 1:
          return _context.abrupt("return", _context.t0);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function resolvePreset(name, dirname) {
  return regeneratorRuntime.wrap(function resolvePreset$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.delegateYield(resolveStandardizedName("preset", name, dirname), "t0", 1);

        case 1:
          return _context2.abrupt("return", _context2.t0);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function loadPlugin(name, dirname) {
  var filepath, value;
  return regeneratorRuntime.wrap(function loadPlugin$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          return _context3.delegateYield(resolvePlugin(name, dirname), "t0", 1);

        case 1:
          filepath = _context3.t0;
          return _context3.delegateYield(requireModule("plugin", filepath), "t1", 3);

        case 3:
          value = _context3.t1;
          debug("Loaded plugin %o from %o.", name, dirname);
          return _context3.abrupt("return", {
            filepath: filepath,
            value: value
          });

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}

function loadPreset(name, dirname) {
  var filepath, value;
  return regeneratorRuntime.wrap(function loadPreset$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.delegateYield(resolvePreset(name, dirname), "t0", 1);

        case 1:
          filepath = _context4.t0;
          return _context4.delegateYield(requireModule("preset", filepath), "t1", 3);

        case 3:
          value = _context4.t1;
          debug("Loaded preset %o from %o.", name, dirname);
          return _context4.abrupt("return", {
            filepath: filepath,
            value: value
          });

        case 6:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4);
}

function standardizeName(type, name) {
  if (_path().isAbsolute(name)) return name;
  var isPreset = type === "preset";
  return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, "babel-".concat(type, "-")).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, "$1".concat(type, "-")).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, "$1babel-".concat(type, "-")).replace(OTHER_ORG_DEFAULT_RE, "$1/babel-".concat(type)).replace(EXACT_RE, "");
}

function resolveAlternativesHelper(type, name) {
  var standardizedName, _ref, error, value, oppositeType;

  return regeneratorRuntime.wrap(function resolveAlternativesHelper$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          standardizedName = standardizeName(type, name);
          _context5.next = 3;
          return standardizedName;

        case 3:
          _ref = _context5.sent;
          error = _ref.error;
          value = _ref.value;

          if (error) {
            _context5.next = 8;
            break;
          }

          return _context5.abrupt("return", value);

        case 8:
          if (!(error.code !== "MODULE_NOT_FOUND")) {
            _context5.next = 10;
            break;
          }

          throw error;

        case 10:
          _context5.t0 = standardizedName !== name;

          if (!_context5.t0) {
            _context5.next = 15;
            break;
          }

          _context5.next = 14;
          return name;

        case 14:
          _context5.t0 = !_context5.sent.error;

        case 15:
          if (!_context5.t0) {
            _context5.next = 17;
            break;
          }

          error.message += "\n- If you want to resolve \"".concat(name, "\", use \"module:").concat(name, "\"");

        case 17:
          _context5.next = 19;
          return standardizeName(type, "@babel/" + name);

        case 19:
          if (_context5.sent.error) {
            _context5.next = 21;
            break;
          }

          error.message += "\n- Did you mean \"@babel/".concat(name, "\"?");

        case 21:
          oppositeType = type === "preset" ? "plugin" : "preset";
          _context5.next = 24;
          return standardizeName(oppositeType, name);

        case 24:
          if (_context5.sent.error) {
            _context5.next = 26;
            break;
          }

          error.message += "\n- Did you accidentally pass a ".concat(oppositeType, " as a ").concat(type, "?");

        case 26:
          throw error;

        case 27:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked5);
}

function tryRequireResolve(id, _ref2) {
  var _ref2$paths = _slicedToArray(_ref2.paths, 1),
      dirname = _ref2$paths[0];

  try {
    return {
      error: null,
      value: (function (v, w) {
        return v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1];
      }(process.versions.node, "8.9") ? require.resolve : function (r, _ref3) {
        var _ref3$paths = _slicedToArray(_ref3.paths, 1),
            b = _ref3$paths[0];

        var M = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : require("module");

        var f = M._findPath(r, M._nodeModulePaths(b).concat(b));

        if (f) return f;
        f = new Error("Cannot resolve module '".concat(r, "'"));
        f.code = "MODULE_NOT_FOUND";
        throw f;
      })(id, {
        paths: [dirname]
      })
    };
  } catch (error) {
    return {
      error: error,
      value: null
    };
  }
}

function tryImportMetaResolve(_x, _x2) {
  return _tryImportMetaResolve.apply(this, arguments);
}

function _tryImportMetaResolve() {
  _tryImportMetaResolve = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(id, options) {
    return regeneratorRuntime.wrap(function _callee$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            _context6.next = 3;
            return (0, _importMetaResolve["default"])(id, options);

          case 3:
            _context6.t0 = _context6.sent;
            return _context6.abrupt("return", {
              error: null,
              value: _context6.t0
            });

          case 7:
            _context6.prev = 7;
            _context6.t1 = _context6["catch"](0);
            return _context6.abrupt("return", {
              error: _context6.t1,
              value: null
            });

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));
  return _tryImportMetaResolve.apply(this, arguments);
}

function resolveStandardizedNameForRequire(type, name, dirname) {
  var it = resolveAlternativesHelper(type, name);
  var res = it.next();

  while (!res.done) {
    res = it.next(tryRequireResolve(res.value, {
      paths: [dirname]
    }));
  }

  return res.value;
}

function resolveStandardizedNameForImport(_x3, _x4, _x5) {
  return _resolveStandardizedNameForImport.apply(this, arguments);
}

function _resolveStandardizedNameForImport() {
  _resolveStandardizedNameForImport = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(type, name, dirname) {
    var parentUrl, it, res;
    return regeneratorRuntime.wrap(function _callee2$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            parentUrl = (0, _url().pathToFileURL)(_path().join(dirname, "./babel-virtual-resolve-base.js")).href;
            it = resolveAlternativesHelper(type, name);
            res = it.next();

          case 3:
            if (res.done) {
              _context7.next = 11;
              break;
            }

            _context7.t0 = it;
            _context7.next = 7;
            return tryImportMetaResolve(res.value, parentUrl);

          case 7:
            _context7.t1 = _context7.sent;
            res = _context7.t0.next.call(_context7.t0, _context7.t1);
            _context7.next = 3;
            break;

          case 11:
            return _context7.abrupt("return", (0, _url().fileURLToPath)(res.value));

          case 12:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee2);
  }));
  return _resolveStandardizedNameForImport.apply(this, arguments);
}

var resolveStandardizedName = _gensync()({
  sync: function sync(type, name) {
    var dirname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.cwd();
    return resolveStandardizedNameForRequire(type, name, dirname);
  },
  async: function async(type, name) {
    var dirname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.cwd();
    return _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (_moduleTypes.supportsESM) {
                _context8.next = 2;
                break;
              }

              return _context8.abrupt("return", resolveStandardizedNameForRequire(type, name, dirname));

            case 2:
              _context8.prev = 2;
              _context8.next = 5;
              return resolveStandardizedNameForImport(type, name, dirname);

            case 5:
              return _context8.abrupt("return", _context8.sent);

            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](2);
              _context8.prev = 10;
              return _context8.abrupt("return", resolveStandardizedNameForRequire(type, name, dirname));

            case 14:
              _context8.prev = 14;
              _context8.t1 = _context8["catch"](10);

              if (!(_context8.t0.type === "MODULE_NOT_FOUND")) {
                _context8.next = 18;
                break;
              }

              throw _context8.t0;

            case 18:
              if (!(_context8.t1.type === "MODULE_NOT_FOUND")) {
                _context8.next = 20;
                break;
              }

              throw _context8.t1;

            case 20:
              throw _context8.t0;

            case 21:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee3, null, [[2, 8], [10, 14]]);
    }))();
  }
});

{
  var LOADING_MODULES = new Set();
}

function requireModule(type, name) {
  return regeneratorRuntime.wrap(function requireModule$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          return _context9.delegateYield((0, _async.isAsync)(), "t1", 1);

        case 1:
          _context9.t0 = !_context9.t1;

          if (!_context9.t0) {
            _context9.next = 4;
            break;
          }

          _context9.t0 = LOADING_MODULES.has(name);

        case 4:
          if (!_context9.t0) {
            _context9.next = 6;
            break;
          }

          throw new Error("Reentrant ".concat(type, " detected trying to load \"").concat(name, "\". This module is not ignored ") + "and is trying to load itself while compiling itself, leading to a dependency cycle. " + 'We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.');

        case 6:
          _context9.prev = 6;
          LOADING_MODULES.add(name);
          return _context9.delegateYield((0, _moduleTypes["default"])(name, "You appear to be using a native ECMAScript module ".concat(type, ", ") + "which is only supported when running Babel asynchronously.", true), "t2", 9);

        case 9:
          return _context9.abrupt("return", _context9.t2);

        case 12:
          _context9.prev = 12;
          _context9.t3 = _context9["catch"](6);
          _context9.t3.message = "[BABEL]: ".concat(_context9.t3.message, " (While processing: ").concat(name, ")");
          throw _context9.t3;

        case 16:
          _context9.prev = 16;
          LOADING_MODULES["delete"](name);
          return _context9.finish(16);

        case 19:
        case "end":
          return _context9.stop();
      }
    }
  }, _marked6, null, [[6, 12, 16, 19]]);
}

0 && 0;