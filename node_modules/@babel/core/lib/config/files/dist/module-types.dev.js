"use strict";

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(loadCjsOrMjsDefault);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = loadCjsOrMjsDefault;
exports.supportsESM = void 0;

var _async = require("../../gensync-utils/async");

function _path() {
  var data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _url() {
  var data = require("url");

  _url = function _url() {
    return data;
  };

  return data;
}

function _module() {
  var data = require("module");

  _module = function _module() {
    return data;
  };

  return data;
}

function _semver() {
  var data = require("semver");

  _semver = function _semver() {
    return data;
  };

  return data;
}

var _rewriteStackTrace = require("../../errors/rewrite-stack-trace");

var _configError = require("../../errors/config-error");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var import_;

try {
  import_ = require("./import.cjs");
} catch (_unused) {}

var supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");

exports.supportsESM = supportsESM;

function loadCjsOrMjsDefault(filepath, asyncError) {
  var fallbackToTranspiledModule,
      _args = arguments;
  return regeneratorRuntime.wrap(function loadCjsOrMjsDefault$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          fallbackToTranspiledModule = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
          _context.t0 = guessJSModuleType(filepath);
          _context.next = _context.t0 === "cjs" ? 4 : _context.t0 === "unknown" ? 5 : _context.t0 === "mjs" ? 13 : 18;
          break;

        case 4:
          return _context.abrupt("return", loadCjsDefault(filepath, fallbackToTranspiledModule));

        case 5:
          _context.prev = 5;
          return _context.abrupt("return", loadCjsDefault(filepath, fallbackToTranspiledModule));

        case 9:
          _context.prev = 9;
          _context.t1 = _context["catch"](5);

          if (!(_context.t1.code !== "ERR_REQUIRE_ESM")) {
            _context.next = 13;
            break;
          }

          throw _context.t1;

        case 13:
          return _context.delegateYield((0, _async.isAsync)(), "t2", 14);

        case 14:
          if (!_context.t2) {
            _context.next = 17;
            break;
          }

          return _context.delegateYield((0, _async.waitFor)(loadMjsDefault(filepath)), "t3", 16);

        case 16:
          return _context.abrupt("return", _context.t3);

        case 17:
          throw new _configError["default"](asyncError, filepath);

        case 18:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[5, 9]]);
}

function guessJSModuleType(filename) {
  switch (_path().extname(filename)) {
    case ".cjs":
      return "cjs";

    case ".mjs":
      return "mjs";

    default:
      return "unknown";
  }
}

function loadCjsDefault(filepath, fallbackToTranspiledModule) {
  var module = (0, _rewriteStackTrace.endHiddenCallStack)(require)(filepath);
  return module != null && module.__esModule ? module["default"] || (fallbackToTranspiledModule ? module : undefined) : module;
}

function loadMjsDefault(_x) {
  return _loadMjsDefault.apply(this, arguments);
}

function _loadMjsDefault() {
  _loadMjsDefault = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(filepath) {
    var module;
    return regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (import_) {
              _context2.next = 2;
              break;
            }

            throw new _configError["default"]("Internal error: Native ECMAScript modules aren't supported" + " by this platform.\n", filepath);

          case 2:
            _context2.next = 4;
            return (0, _rewriteStackTrace.endHiddenCallStack)(import_)((0, _url().pathToFileURL)(filepath));

          case 4:
            module = _context2.sent;
            return _context2.abrupt("return", module["default"]);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee);
  }));
  return _loadMjsDefault.apply(this, arguments);
}

0 && 0;