"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = resolve;

function _module() {
  var data = require("module");

  _module = function _module() {
    return data;
  };

  return data;
}

var _importMetaResolve = require("../../vendor/import-meta-resolve");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var import_;

try {
  import_ = require("./import.cjs");
} catch (_unused) {}

var importMetaResolveP = import_ && process.execArgv.includes("--experimental-import-meta-resolve") ? import_("data:text/javascript,export default import.meta.resolve").then(function (m) {
  return m["default"] || _importMetaResolve.resolve;
}, function () {
  return _importMetaResolve.resolve;
}) : Promise.resolve(_importMetaResolve.resolve);

function resolve(_x, _x2) {
  return _resolve.apply(this, arguments);
}

function _resolve() {
  _resolve = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(specifier, parent) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return importMetaResolveP;

          case 2:
            _context.t0 = _context.sent;
            _context.t1 = specifier;
            _context.t2 = parent;
            return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _resolve.apply(this, arguments);
}

0 && 0;