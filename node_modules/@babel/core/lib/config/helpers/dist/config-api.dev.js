"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeConfigAPI = makeConfigAPI;
exports.makePluginAPI = makePluginAPI;
exports.makePresetAPI = makePresetAPI;

function _semver() {
  var data = require("semver");

  _semver = function _semver() {
    return data;
  };

  return data;
}

var _ = require("../../");

var _caching = require("../caching");

function makeConfigAPI(cache) {
  var env = function env(value) {
    return cache.using(function (data) {
      if (typeof value === "undefined") return data.envName;

      if (typeof value === "function") {
        return (0, _caching.assertSimpleType)(value(data.envName));
      }

      return (Array.isArray(value) ? value : [value]).some(function (entry) {
        if (typeof entry !== "string") {
          throw new Error("Unexpected non-string value");
        }

        return entry === data.envName;
      });
    });
  };

  var caller = function caller(cb) {
    return cache.using(function (data) {
      return (0, _caching.assertSimpleType)(cb(data.caller));
    });
  };

  return {
    version: _.version,
    cache: cache.simple(),
    env: env,
    async: function async() {
      return false;
    },
    caller: caller,
    assertVersion: assertVersion
  };
}

function makePresetAPI(cache, externalDependencies) {
  var targets = function targets() {
    return JSON.parse(cache.using(function (data) {
      return JSON.stringify(data.targets);
    }));
  };

  var addExternalDependency = function addExternalDependency(ref) {
    externalDependencies.push(ref);
  };

  return Object.assign({}, makeConfigAPI(cache), {
    targets: targets,
    addExternalDependency: addExternalDependency
  });
}

function makePluginAPI(cache, externalDependencies) {
  var assumption = function assumption(name) {
    return cache.using(function (data) {
      return data.assumptions[name];
    });
  };

  return Object.assign({}, makePresetAPI(cache, externalDependencies), {
    assumption: assumption
  });
}

function assertVersion(range) {
  if (typeof range === "number") {
    if (!Number.isInteger(range)) {
      throw new Error("Expected string or integer value.");
    }

    range = "^".concat(range, ".0.0-0");
  }

  if (typeof range !== "string") {
    throw new Error("Expected string or integer value.");
  }

  if (_semver().satisfies(_.version, range)) return;
  var limit = Error.stackTraceLimit;

  if (typeof limit === "number" && limit < 25) {
    Error.stackTraceLimit = 25;
  }

  var err = new Error("Requires Babel \"".concat(range, "\", but was loaded with \"").concat(_.version, "\". ") + "If you are sure you have a compatible version of @babel/core, " + "it is likely that something in your build process is loading the " + "wrong version. Inspect the stack trace of this error to look for " + "the first entry that doesn't mention \"@babel/core\" or \"babel-core\" " + "to see what is calling Babel.");

  if (typeof limit === "number") {
    Error.stackTraceLimit = limit;
  }

  throw Object.assign(err, {
    code: "BABEL_VERSION_UNSUPPORTED",
    version: _.version,
    range: range
  });
}

0 && 0;