"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TargetNames", {
  enumerable: true,
  get: function get() {
    return _options.TargetNames;
  }
});
exports["default"] = getTargets;
Object.defineProperty(exports, "filterItems", {
  enumerable: true,
  get: function get() {
    return _filterItems["default"];
  }
});
Object.defineProperty(exports, "getInclusionReasons", {
  enumerable: true,
  get: function get() {
    return _debug.getInclusionReasons;
  }
});
exports.isBrowsersQueryValid = isBrowsersQueryValid;
Object.defineProperty(exports, "isRequired", {
  enumerable: true,
  get: function get() {
    return _filterItems.isRequired;
  }
});
Object.defineProperty(exports, "prettifyTargets", {
  enumerable: true,
  get: function get() {
    return _pretty.prettifyTargets;
  }
});
Object.defineProperty(exports, "unreleasedLabels", {
  enumerable: true,
  get: function get() {
    return _targets.unreleasedLabels;
  }
});

var _browserslist = require("browserslist");

var _helperValidatorOption = require("@babel/helper-validator-option");

var _nativeModules = require("@babel/compat-data/native-modules");

var _utils = require("./utils");

var _targets = require("./targets");

var _options = require("./options");

var _pretty = require("./pretty");

var _debug = require("./debug");

var _filterItems = require("./filter-items");

var ESM_SUPPORT = _nativeModules["es6.module"];
var v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");

function validateTargetNames(targets) {
  var validTargets = Object.keys(_options.TargetNames);

  for (var _i = 0, _Object$keys = Object.keys(targets); _i < _Object$keys.length; _i++) {
    var target = _Object$keys[_i];

    if (!(target in _options.TargetNames)) {
      throw new Error(v.formatMessage("'".concat(target, "' is not a valid target\n- Did you mean '").concat((0, _helperValidatorOption.findSuggestion)(target, validTargets), "'?")));
    }
  }

  return targets;
}

function isBrowsersQueryValid(browsers) {
  return typeof browsers === "string" || Array.isArray(browsers) && browsers.every(function (b) {
    return typeof b === "string";
  });
}

function validateBrowsers(browsers) {
  v.invariant(browsers === undefined || isBrowsersQueryValid(browsers), "'".concat(String(browsers), "' is not a valid browserslist query"));
  return browsers;
}

function getLowestVersions(browsers) {
  return browsers.reduce(function (all, browser) {
    var _browser$split = browser.split(" "),
        _browser$split2 = _slicedToArray(_browser$split, 2),
        browserName = _browser$split2[0],
        browserVersion = _browser$split2[1];

    var target = _targets.browserNameMap[browserName];

    if (!target) {
      return all;
    }

    try {
      var splitVersion = browserVersion.split("-")[0].toLowerCase();
      var isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, target);

      if (!all[target]) {
        all[target] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);
        return all;
      }

      var version = all[target];
      var isUnreleased = (0, _utils.isUnreleasedVersion)(version, target);

      if (isUnreleased && isSplitUnreleased) {
        all[target] = (0, _utils.getLowestUnreleased)(version, splitVersion, target);
      } else if (isUnreleased) {
        all[target] = (0, _utils.semverify)(splitVersion);
      } else if (!isUnreleased && !isSplitUnreleased) {
        var parsedBrowserVersion = (0, _utils.semverify)(splitVersion);
        all[target] = (0, _utils.semverMin)(version, parsedBrowserVersion);
      }
    } catch (e) {}

    return all;
  }, {});
}

function outputDecimalWarning(decimalTargets) {
  if (!decimalTargets.length) {
    return;
  }

  console.warn("Warning, the following targets are using a decimal version:\n");
  decimalTargets.forEach(function (_ref) {
    var target = _ref.target,
        value = _ref.value;
    return console.warn("  ".concat(target, ": ").concat(value));
  });
  console.warn("\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\ngetting parsed as 6.1, which can lead to unexpected behavior.\n");
}

function semverifyTarget(target, value) {
  try {
    return (0, _utils.semverify)(value);
  } catch (error) {
    throw new Error(v.formatMessage("'".concat(value, "' is not a valid value for 'targets.").concat(target, "'.")));
  }
}

function nodeTargetParser(value) {
  var parsed = value === true || value === "current" ? process.versions.node : semverifyTarget("node", value);
  return ["node", parsed];
}

function defaultTargetParser(target, value) {
  var version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);
  return [target, version];
}

function generateTargets(inputTargets) {
  var input = Object.assign({}, inputTargets);
  delete input.esmodules;
  delete input.browsers;
  return input;
}

function resolveTargets(queries, env) {
  var resolved = _browserslist(queries, {
    mobileToDesktop: true,
    env: env
  });

  return getLowestVersions(resolved);
}

function getTargets() {
  var inputTargets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _browsers, _browsers2;

  var browsers = inputTargets.browsers,
      esmodules = inputTargets.esmodules;
  var _options$configPath = options.configPath,
      configPath = _options$configPath === void 0 ? "." : _options$configPath;
  validateBrowsers(browsers);
  var input = generateTargets(inputTargets);
  var targets = validateTargetNames(input);
  var shouldParseBrowsers = !!browsers;
  var hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;
  var shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;

  if (!browsers && shouldSearchForConfig) {
    browsers = _browserslist.loadConfig({
      config: options.configFile,
      path: configPath,
      env: options.browserslistEnv
    });

    if (browsers == null) {
      {
        browsers = [];
      }
    }
  }

  if (esmodules && (esmodules !== "intersect" || !((_browsers = browsers) != null && _browsers.length))) {
    browsers = Object.keys(ESM_SUPPORT).map(function (browser) {
      return "".concat(browser, " >= ").concat(ESM_SUPPORT[browser]);
    }).join(", ");
    esmodules = false;
  }

  if ((_browsers2 = browsers) != null && _browsers2.length) {
    var queryBrowsers = resolveTargets(browsers, options.browserslistEnv);

    if (esmodules === "intersect") {
      for (var _i2 = 0, _Object$keys2 = Object.keys(queryBrowsers); _i2 < _Object$keys2.length; _i2++) {
        var browser = _Object$keys2[_i2];
        var version = queryBrowsers[browser];
        var esmSupportVersion = ESM_SUPPORT[browser];

        if (esmSupportVersion) {
          queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(esmSupportVersion), browser);
        } else {
          delete queryBrowsers[browser];
        }
      }
    }

    targets = Object.assign(queryBrowsers, targets);
  }

  var result = {};
  var decimalWarnings = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(targets).sort()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var target = _step.value;
      var value = targets[target];

      if (typeof value === "number" && value % 1 !== 0) {
        decimalWarnings.push({
          target: target,
          value: value
        });
      }

      var _ref2 = target === "node" ? nodeTargetParser(value) : defaultTargetParser(target, value),
          _ref3 = _slicedToArray(_ref2, 2),
          parsedTarget = _ref3[0],
          parsedValue = _ref3[1];

      if (parsedValue) {
        result[parsedTarget] = parsedValue;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  outputDecimalWarning(decimalWarnings);
  return result;
}