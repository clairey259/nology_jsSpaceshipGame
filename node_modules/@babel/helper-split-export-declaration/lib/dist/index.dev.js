"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = splitExportDeclaration;

var _t = require("@babel/types");

var cloneNode = _t.cloneNode,
    exportNamedDeclaration = _t.exportNamedDeclaration,
    exportSpecifier = _t.exportSpecifier,
    identifier = _t.identifier,
    variableDeclaration = _t.variableDeclaration,
    variableDeclarator = _t.variableDeclarator;

function splitExportDeclaration(exportDeclaration) {
  if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) {
    throw new Error("Only default and named export declarations can be split.");
  }

  if (exportDeclaration.isExportDefaultDeclaration()) {
    var _declaration = exportDeclaration.get("declaration");

    var standaloneDeclaration = _declaration.isFunctionDeclaration() || _declaration.isClassDeclaration();

    var scope = _declaration.isScope() ? _declaration.scope.parent : _declaration.scope;
    var id = _declaration.node.id;
    var needBindingRegistration = false;

    if (!id) {
      needBindingRegistration = true;
      id = scope.generateUidIdentifier("default");

      if (standaloneDeclaration || _declaration.isFunctionExpression() || _declaration.isClassExpression()) {
        _declaration.node.id = cloneNode(id);
      }
    }

    var updatedDeclaration = standaloneDeclaration ? _declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), _declaration.node)]);
    var updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
    exportDeclaration.insertAfter(updatedExportDeclaration);
    exportDeclaration.replaceWith(updatedDeclaration);

    if (needBindingRegistration) {
      scope.registerDeclaration(exportDeclaration);
    }

    return exportDeclaration;
  } else if (exportDeclaration.get("specifiers").length > 0) {
    throw new Error("It doesn't make sense to split exported specifiers.");
  }

  var declaration = exportDeclaration.get("declaration");
  var bindingIdentifiers = declaration.getOuterBindingIdentifiers();
  var specifiers = Object.keys(bindingIdentifiers).map(function (name) {
    return exportSpecifier(identifier(name), identifier(name));
  });
  var aliasDeclar = exportNamedDeclaration(null, specifiers);
  exportDeclaration.insertAfter(aliasDeclar);
  exportDeclaration.replaceWith(declaration.node);
  return exportDeclaration;
}