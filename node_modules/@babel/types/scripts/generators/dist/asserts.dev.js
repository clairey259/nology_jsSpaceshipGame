"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateAsserts;

var _index = require("../../lib/index.js");

function addAssertHelper(type) {
  var result = _index.NODE_FIELDS[type] || _index.FLIPPED_ALIAS_KEYS[type] ? "node is t.".concat(type) : "boolean";
  return "export function assert".concat(type, "(node: object | null | undefined, opts?: object | null): asserts ").concat(result === "boolean" ? "node" : result, " {\n    assert(\"").concat(type, "\", node, opts) }\n  ");
}

function generateAsserts() {
  var output = "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is\";\nimport type * as t from \"../..\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\n";
  Object.keys(_index.VISITOR_KEYS).forEach(function (type) {
    output += addAssertHelper(type);
  });
  Object.keys(_index.FLIPPED_ALIAS_KEYS).forEach(function (type) {
    output += addAssertHelper(type);
  });
  Object.keys(_index.DEPRECATED_KEYS).forEach(function (type) {
    var newType = _index.DEPRECATED_KEYS[type];
    output += "export function assert".concat(type, "(node: any, opts: any): void {\n  console.trace(\"The node type ").concat(type, " has been renamed to ").concat(newType, "\");\n  assert(\"").concat(type, "\", node, opts);\n}\n");
  });
  return output;
}