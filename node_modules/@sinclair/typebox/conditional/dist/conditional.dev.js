"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/conditional

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Conditional = void 0;

var Types = require("../typebox");

var structural_1 = require("./structural");

var index_1 = require("../guard/index");
/** Conditional Types */


var Conditional;

(function (Conditional) {
  /** (Experimental) Creates a conditional expression type */
  function Extends(left, right, ok, fail) {
    switch (structural_1.Structural.Check(left, right)) {
      case structural_1.StructuralResult.Union:
        return Types.Type.Union([Clone(ok), Clone(fail)]);

      case structural_1.StructuralResult.True:
        return Clone(ok);

      case structural_1.StructuralResult.False:
        return Clone(fail);
    }
  }

  Conditional.Extends = Extends;
  /** (Experimental) Constructs a type by excluding from UnionType all union members that are assignable to ExcludedMembers. */

  function Exclude(unionType, excludedMembers) {
    var _objectSpread2;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var anyOf = unionType.anyOf.filter(function (schema) {
      var check = structural_1.Structural.Check(schema, excludedMembers);
      return !(check === structural_1.StructuralResult.True || check === structural_1.StructuralResult.Union);
    }).map(function (schema) {
      return Clone(schema);
    });
    return _objectSpread({}, options, (_objectSpread2 = {}, _defineProperty(_objectSpread2, Types.Kind, 'Union'), _defineProperty(_objectSpread2, "anyOf", anyOf), _objectSpread2));
  }

  Conditional.Exclude = Exclude;
  /** (Experimental) Constructs a type by extracting from Type all union members that are assignable to Union. */

  function Extract(type, union) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (index_1.TypeGuard.TUnion(type)) {
      var _objectSpread3;

      var anyOf = type.anyOf.filter(function (schema) {
        return structural_1.Structural.Check(schema, union) === structural_1.StructuralResult.True;
      }).map(function (schema) {
        return Clone(schema);
      });
      return _objectSpread({}, options, (_objectSpread3 = {}, _defineProperty(_objectSpread3, Types.Kind, 'Union'), _defineProperty(_objectSpread3, "anyOf", anyOf), _objectSpread3));
    } else {
      var _objectSpread4;

      var _anyOf = union.anyOf.filter(function (schema) {
        return structural_1.Structural.Check(type, schema) === structural_1.StructuralResult.True;
      }).map(function (schema) {
        return Clone(schema);
      });

      return _objectSpread({}, options, (_objectSpread4 = {}, _defineProperty(_objectSpread4, Types.Kind, 'Union'), _defineProperty(_objectSpread4, "anyOf", _anyOf), _objectSpread4));
    }
  }

  Conditional.Extract = Extract;

  function Clone(value) {
    var isObject = function isObject(object) {
      return _typeof(object) === 'object' && object !== null && !Array.isArray(object);
    };

    var isArray = function isArray(object) {
      return _typeof(object) === 'object' && object !== null && Array.isArray(object);
    };

    if (isObject(value)) {
      return Object.keys(value).reduce(function (acc, key) {
        return _objectSpread({}, acc, _defineProperty({}, key, Clone(value[key])));
      }, Object.getOwnPropertySymbols(value).reduce(function (acc, key) {
        return _objectSpread({}, acc, _defineProperty({}, key, Clone(value[key])));
      }, {}));
    } else if (isArray(value)) {
      return value.map(function (item) {
        return Clone(item);
      });
    } else {
      return value;
    }
  }
})(Conditional = exports.Conditional || (exports.Conditional = {}));