"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Type = exports.TypeBuilder = exports.Modifier = exports.Hint = exports.Kind = void 0; // --------------------------------------------------------------------------
// Symbols
// --------------------------------------------------------------------------

exports.Kind = Symbol["for"]('TypeBox.Kind');
exports.Hint = Symbol["for"]('TypeBox.Hint');
exports.Modifier = Symbol["for"]('TypeBox.Modifier'); // --------------------------------------------------------------------------
// TypeBuilder
// --------------------------------------------------------------------------

var TypeOrdinal = 0;

var TypeBuilder =
/*#__PURE__*/
function () {
  function TypeBuilder() {
    _classCallCheck(this, TypeBuilder);
  }

  _createClass(TypeBuilder, [{
    key: "ReadonlyOptional",
    // ----------------------------------------------------------------------
    // Modifiers
    // ----------------------------------------------------------------------

    /** Creates a readonly optional property */
    value: function ReadonlyOptional(item) {
      return _objectSpread(_defineProperty({}, exports.Modifier, 'ReadonlyOptional'), item);
    }
    /** Creates a readonly property */

  }, {
    key: "Readonly",
    value: function Readonly(item) {
      return _objectSpread(_defineProperty({}, exports.Modifier, 'Readonly'), item);
    }
    /** Creates a optional property */

  }, {
    key: "Optional",
    value: function Optional(item) {
      return _objectSpread(_defineProperty({}, exports.Modifier, 'Optional'), item);
    } // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    /** Creates a any type */

  }, {
    key: "Any",
    value: function Any() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, _defineProperty({}, exports.Kind, 'Any')));
    }
    /** Creates a array type */

  }, {
    key: "Array",
    value: function Array(items) {
      var _objectSpread6;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread6 = {}, _defineProperty(_objectSpread6, exports.Kind, 'Array'), _defineProperty(_objectSpread6, "type", 'array'), _defineProperty(_objectSpread6, "items", items), _objectSpread6)));
    }
    /** Creates a boolean type */

  }, {
    key: "Boolean",
    value: function Boolean() {
      var _objectSpread7;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread7 = {}, _defineProperty(_objectSpread7, exports.Kind, 'Boolean'), _defineProperty(_objectSpread7, "type", 'boolean'), _objectSpread7)));
    }
    /** Creates a tuple type from this constructors parameters */

  }, {
    key: "ConstructorParameters",
    value: function ConstructorParameters(schema) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.Tuple(_toConsumableArray(schema.parameters), _objectSpread({}, options));
    }
    /** Creates a constructor type */

  }, {
    key: "Constructor",
    value: function Constructor(parameters, returns) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (parameters[exports.Kind] === 'Tuple') {
        var _objectSpread8;

        var inner = parameters.items === undefined ? [] : parameters.items;
        return this.Create(_objectSpread({}, options, (_objectSpread8 = {}, _defineProperty(_objectSpread8, exports.Kind, 'Constructor'), _defineProperty(_objectSpread8, "type", 'constructor'), _defineProperty(_objectSpread8, "parameters", inner), _defineProperty(_objectSpread8, "returns", returns), _objectSpread8)));
      } else if (globalThis.Array.isArray(parameters)) {
        var _objectSpread9;

        return this.Create(_objectSpread({}, options, (_objectSpread9 = {}, _defineProperty(_objectSpread9, exports.Kind, 'Constructor'), _defineProperty(_objectSpread9, "type", 'constructor'), _defineProperty(_objectSpread9, "parameters", parameters), _defineProperty(_objectSpread9, "returns", returns), _objectSpread9)));
      } else {
        throw new Error('TypeBuilder.Constructor: Invalid parameters');
      }
    }
    /** Creates a enum type */

  }, {
    key: "Enum",
    value: function Enum(item) {
      var _objectSpread10;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var values = Object.keys(item).filter(function (key) {
        return isNaN(key);
      }).map(function (key) {
        return item[key];
      });
      var anyOf = values.map(function (value) {
        var _ref, _ref2;

        return typeof value === 'string' ? (_ref = {}, _defineProperty(_ref, exports.Kind, 'Literal'), _defineProperty(_ref, "type", 'string'), _defineProperty(_ref, "const", value), _ref) : (_ref2 = {}, _defineProperty(_ref2, exports.Kind, 'Literal'), _defineProperty(_ref2, "type", 'number'), _defineProperty(_ref2, "const", value), _ref2);
      });
      return this.Create(_objectSpread({}, options, (_objectSpread10 = {}, _defineProperty(_objectSpread10, exports.Kind, 'Union'), _defineProperty(_objectSpread10, exports.Hint, 'Enum'), _defineProperty(_objectSpread10, "anyOf", anyOf), _objectSpread10)));
    }
    /** Creates a function type */

  }, {
    key: "Function",
    value: function Function(parameters, returns) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (parameters[exports.Kind] === 'Tuple') {
        var _objectSpread11;

        var inner = parameters.items === undefined ? [] : parameters.items;
        return this.Create(_objectSpread({}, options, (_objectSpread11 = {}, _defineProperty(_objectSpread11, exports.Kind, 'Function'), _defineProperty(_objectSpread11, "type", 'function'), _defineProperty(_objectSpread11, "parameters", inner), _defineProperty(_objectSpread11, "returns", returns), _objectSpread11)));
      } else if (globalThis.Array.isArray(parameters)) {
        var _objectSpread12;

        return this.Create(_objectSpread({}, options, (_objectSpread12 = {}, _defineProperty(_objectSpread12, exports.Kind, 'Function'), _defineProperty(_objectSpread12, "type", 'function'), _defineProperty(_objectSpread12, "parameters", parameters), _defineProperty(_objectSpread12, "returns", returns), _objectSpread12)));
      } else {
        throw new Error('TypeBuilder.Function: Invalid parameters');
      }
    }
    /** Creates a type from this constructors instance type */

  }, {
    key: "InstanceType",
    value: function InstanceType(schema) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _objectSpread({}, options, {}, this.Clone(schema.returns));
    }
    /** Creates a integer type */

  }, {
    key: "Integer",
    value: function Integer() {
      var _objectSpread13;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread13 = {}, _defineProperty(_objectSpread13, exports.Kind, 'Integer'), _defineProperty(_objectSpread13, "type", 'integer'), _objectSpread13)));
    }
    /** Creates a intersect type. */

  }, {
    key: "Intersect",
    value: function Intersect(objects) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var isOptional = function isOptional(schema) {
        return schema[exports.Modifier] && schema[exports.Modifier] === 'Optional' || schema[exports.Modifier] === 'ReadonlyOptional';
      };

      var required = new Set(),
          optional = new Set();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var object = _step.value;

          for (var _i = 0, _Object$entries = Object.entries(object.properties); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                key = _Object$entries$_i[0],
                schema = _Object$entries$_i[1];

            if (isOptional(schema)) optional.add(key);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = objects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _object = _step2.value;

          for (var _i2 = 0, _Object$keys = Object.keys(_object.properties); _i2 < _Object$keys.length; _i2++) {
            var _key = _Object$keys[_i2];
            if (!optional.has(_key)) required.add(_key);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var properties = {};
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = objects[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _object2 = _step3.value;

          for (var _i3 = 0, _Object$entries2 = Object.entries(_object2.properties); _i3 < _Object$entries2.length; _i3++) {
            var _ref3;

            var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
                _key2 = _Object$entries2$_i[0],
                _schema = _Object$entries2$_i[1];

            properties[_key2] = properties[_key2] === undefined ? _schema : (_ref3 = {}, _defineProperty(_ref3, exports.Kind, 'Union'), _defineProperty(_ref3, "anyOf", [properties[_key2], _objectSpread({}, _schema)]), _ref3);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (required.size > 0) {
        var _objectSpread14;

        return this.Create(_objectSpread({}, options, (_objectSpread14 = {}, _defineProperty(_objectSpread14, exports.Kind, 'Object'), _defineProperty(_objectSpread14, "type", 'object'), _defineProperty(_objectSpread14, "properties", properties), _defineProperty(_objectSpread14, "required", _toConsumableArray(required)), _objectSpread14)));
      } else {
        var _objectSpread15;

        return this.Create(_objectSpread({}, options, (_objectSpread15 = {}, _defineProperty(_objectSpread15, exports.Kind, 'Object'), _defineProperty(_objectSpread15, "type", 'object'), _defineProperty(_objectSpread15, "properties", properties), _objectSpread15)));
      }
    }
    /** Creates a keyof type */

  }, {
    key: "KeyOf",
    value: function KeyOf(object) {
      var _this = this,
          _objectSpread17;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var items = Object.keys(object.properties).map(function (key) {
        var _objectSpread16;

        return _this.Create(_objectSpread({}, options, (_objectSpread16 = {}, _defineProperty(_objectSpread16, exports.Kind, 'Literal'), _defineProperty(_objectSpread16, "type", 'string'), _defineProperty(_objectSpread16, "const", key), _objectSpread16)));
      });
      return this.Create(_objectSpread({}, options, (_objectSpread17 = {}, _defineProperty(_objectSpread17, exports.Kind, 'Union'), _defineProperty(_objectSpread17, exports.Hint, 'KeyOf'), _defineProperty(_objectSpread17, "anyOf", items), _objectSpread17)));
    }
    /** Creates a literal type. */

  }, {
    key: "Literal",
    value: function Literal(value) {
      var _objectSpread18;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread18 = {}, _defineProperty(_objectSpread18, exports.Kind, 'Literal'), _defineProperty(_objectSpread18, "const", value), _defineProperty(_objectSpread18, "type", _typeof(value)), _objectSpread18)));
    }
    /** Creates a never type */

  }, {
    key: "Never",
    value: function Never() {
      var _objectSpread19;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread19 = {}, _defineProperty(_objectSpread19, exports.Kind, 'Never'), _defineProperty(_objectSpread19, "allOf", [{
        type: 'boolean',
        "const": false
      }, {
        type: 'boolean',
        "const": true
      }]), _objectSpread19)));
    }
    /** Creates a null type */

  }, {
    key: "Null",
    value: function Null() {
      var _objectSpread20;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread20 = {}, _defineProperty(_objectSpread20, exports.Kind, 'Null'), _defineProperty(_objectSpread20, "type", 'null'), _objectSpread20)));
    }
    /** Creates a number type */

  }, {
    key: "Number",
    value: function Number() {
      var _objectSpread21;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread21 = {}, _defineProperty(_objectSpread21, exports.Kind, 'Number'), _defineProperty(_objectSpread21, "type", 'number'), _objectSpread21)));
    }
    /** Creates an object type with the given properties */

  }, {
    key: "Object",
    value: function (_Object) {
      function Object(_x) {
        return _Object.apply(this, arguments);
      }

      Object.toString = function () {
        return _Object.toString();
      };

      return Object;
    }(function (properties) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var property_names = Object.keys(properties);
      var optional = property_names.filter(function (name) {
        var property = properties[name];
        var modifier = property[exports.Modifier];
        return modifier && (modifier === 'Optional' || modifier === 'ReadonlyOptional');
      });
      var required = property_names.filter(function (name) {
        return !optional.includes(name);
      });

      if (required.length > 0) {
        var _objectSpread22;

        return this.Create(_objectSpread({}, options, (_objectSpread22 = {}, _defineProperty(_objectSpread22, exports.Kind, 'Object'), _defineProperty(_objectSpread22, "type", 'object'), _defineProperty(_objectSpread22, "properties", properties), _defineProperty(_objectSpread22, "required", required), _objectSpread22)));
      } else {
        var _objectSpread23;

        return this.Create(_objectSpread({}, options, (_objectSpread23 = {}, _defineProperty(_objectSpread23, exports.Kind, 'Object'), _defineProperty(_objectSpread23, "type", 'object'), _defineProperty(_objectSpread23, "properties", properties), _objectSpread23)));
      }
    })
    /** Creates a new object whose properties are omitted from the given object */

  }, {
    key: "Omit",
    value: function Omit(schema, keys) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var select = keys[exports.Kind] === 'Union' ? keys.anyOf.map(function (schema) {
        return schema["const"];
      }) : keys;

      var next = _objectSpread({}, this.Clone(schema), {}, options, _defineProperty({}, exports.Hint, 'Omit'));

      if (next.required) {
        next.required = next.required.filter(function (key) {
          return !select.includes(key);
        });
        if (next.required.length === 0) delete next.required;
      }

      for (var _i4 = 0, _Object$keys2 = Object.keys(next.properties); _i4 < _Object$keys2.length; _i4++) {
        var key = _Object$keys2[_i4];
        if (select.includes(key)) delete next.properties[key];
      }

      return this.Create(next);
    }
    /** Creates a tuple type from this functions parameters */

  }, {
    key: "Parameters",
    value: function Parameters(schema) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return exports.Type.Tuple(schema.parameters, _objectSpread({}, options));
    }
    /** Creates an object type whose properties are all optional */

  }, {
    key: "Partial",
    value: function Partial(schema) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var next = _objectSpread({}, this.Clone(schema), {}, options, _defineProperty({}, exports.Hint, 'Partial'));

      delete next.required;

      for (var _i5 = 0, _Object$keys3 = Object.keys(next.properties); _i5 < _Object$keys3.length; _i5++) {
        var key = _Object$keys3[_i5];
        var property = next.properties[key];
        var modifer = property[exports.Modifier];

        switch (modifer) {
          case 'ReadonlyOptional':
            property[exports.Modifier] = 'ReadonlyOptional';
            break;

          case 'Readonly':
            property[exports.Modifier] = 'ReadonlyOptional';
            break;

          case 'Optional':
            property[exports.Modifier] = 'Optional';
            break;

          default:
            property[exports.Modifier] = 'Optional';
            break;
        }
      }

      return this.Create(next);
    }
    /** Creates a object whose properties are picked from the given object */

  }, {
    key: "Pick",
    value: function Pick(schema, keys) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var select = keys[exports.Kind] === 'Union' ? keys.anyOf.map(function (schema) {
        return schema["const"];
      }) : keys;

      var next = _objectSpread({}, this.Clone(schema), {}, options, _defineProperty({}, exports.Hint, 'Pick'));

      if (next.required) {
        next.required = next.required.filter(function (key) {
          return select.includes(key);
        });
        if (next.required.length === 0) delete next.required;
      }

      for (var _i6 = 0, _Object$keys4 = Object.keys(next.properties); _i6 < _Object$keys4.length; _i6++) {
        var key = _Object$keys4[_i6];
        if (!select.includes(key)) delete next.properties[key];
      }

      return this.Create(next);
    }
    /** Creates a promise type. This type cannot be represented in schema. */

  }, {
    key: "Promise",
    value: function Promise(item) {
      var _objectSpread27;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread27 = {}, _defineProperty(_objectSpread27, exports.Kind, 'Promise'), _defineProperty(_objectSpread27, "type", 'promise'), _defineProperty(_objectSpread27, "item", item), _objectSpread27)));
    }
    /** Creates a record type */

  }, {
    key: "Record",
    value: function Record(key, value) {
      var _objectSpread30;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // If string literal union return TObject with properties extracted from union.
      if (key[exports.Kind] === 'Union') {
        return this.Object(key.anyOf.reduce(function (acc, literal) {
          return _objectSpread({}, acc, _defineProperty({}, literal["const"], value));
        }, {}), _objectSpread({}, options, _defineProperty({}, exports.Hint, 'Record')));
      } // otherwise return TRecord with patternProperties


      var pattern = key[exports.Kind] === 'Number' ? '^(0|[1-9][0-9]*)$' : key[exports.Kind] === 'String' && key.pattern ? key.pattern : '^.*$';
      return this.Create(_objectSpread({}, options, (_objectSpread30 = {}, _defineProperty(_objectSpread30, exports.Kind, 'Record'), _defineProperty(_objectSpread30, "type", 'object'), _defineProperty(_objectSpread30, "patternProperties", _defineProperty({}, pattern, value)), _defineProperty(_objectSpread30, "additionalProperties", false), _objectSpread30)));
    }
    /** Creates a recursive object type */

  }, {
    key: "Recursive",
    value: function Recursive(callback) {
      var _callback;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (options.$id === undefined) options.$id = "T".concat(TypeOrdinal++);
      var self = callback((_callback = {}, _defineProperty(_callback, exports.Kind, 'Self'), _defineProperty(_callback, "$ref", "".concat(options.$id)), _callback));
      self.$id = options.$id;
      return this.Create(_objectSpread({}, options, {}, self));
    }
    /** Creates a reference schema */

  }, {
    key: "Ref",
    value: function Ref(schema) {
      var _objectSpread31;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (schema.$id === undefined) throw Error('TypeBuilder.Ref: Referenced schema must specify an $id');
      return this.Create(_objectSpread({}, options, (_objectSpread31 = {}, _defineProperty(_objectSpread31, exports.Kind, 'Ref'), _defineProperty(_objectSpread31, "$ref", schema.$id), _objectSpread31)));
    }
    /** Creates a string type from a regular expression */

  }, {
    key: "RegEx",
    value: function RegEx(regex) {
      var _objectSpread32;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread32 = {}, _defineProperty(_objectSpread32, exports.Kind, 'String'), _defineProperty(_objectSpread32, "type", 'string'), _defineProperty(_objectSpread32, "pattern", regex.source), _objectSpread32)));
    }
    /** Creates an object type whose properties are all required */

  }, {
    key: "Required",
    value: function Required(schema) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var next = _objectSpread({}, this.Clone(schema), {}, options, _defineProperty({}, exports.Hint, 'Required'));

      next.required = Object.keys(next.properties);

      for (var _i7 = 0, _Object$keys5 = Object.keys(next.properties); _i7 < _Object$keys5.length; _i7++) {
        var key = _Object$keys5[_i7];
        var property = next.properties[key];
        var modifier = property[exports.Modifier];

        switch (modifier) {
          case 'ReadonlyOptional':
            property[exports.Modifier] = 'Readonly';
            break;

          case 'Readonly':
            property[exports.Modifier] = 'Readonly';
            break;

          case 'Optional':
            delete property[exports.Modifier];
            break;

          default:
            delete property[exports.Modifier];
            break;
        }
      }

      return this.Create(next);
    }
    /** Creates a type from this functions return type */

  }, {
    key: "ReturnType",
    value: function ReturnType(schema) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _objectSpread({}, options, {}, this.Clone(schema.returns));
    }
    /** Removes Kind and Modifier symbol property keys from this schema */

  }, {
    key: "Strict",
    value: function Strict(schema) {
      return JSON.parse(JSON.stringify(schema));
    }
    /** Creates a string type */

  }, {
    key: "String",
    value: function String() {
      var _objectSpread34;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread34 = {}, _defineProperty(_objectSpread34, exports.Kind, 'String'), _defineProperty(_objectSpread34, "type", 'string'), _objectSpread34)));
    }
    /** Creates a tuple type */

  }, {
    key: "Tuple",
    value: function Tuple(items) {
      var _objectSpread35, _objectSpread36;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var additionalItems = false;
      var minItems = items.length;
      var maxItems = items.length;
      var schema = items.length > 0 ? _objectSpread({}, options, (_objectSpread35 = {}, _defineProperty(_objectSpread35, exports.Kind, 'Tuple'), _defineProperty(_objectSpread35, "type", 'array'), _defineProperty(_objectSpread35, "items", items), _defineProperty(_objectSpread35, "additionalItems", additionalItems), _defineProperty(_objectSpread35, "minItems", minItems), _defineProperty(_objectSpread35, "maxItems", maxItems), _objectSpread35)) : _objectSpread({}, options, (_objectSpread36 = {}, _defineProperty(_objectSpread36, exports.Kind, 'Tuple'), _defineProperty(_objectSpread36, "type", 'array'), _defineProperty(_objectSpread36, "minItems", minItems), _defineProperty(_objectSpread36, "maxItems", maxItems), _objectSpread36));
      return this.Create(schema);
    }
    /** Creates a undefined type */

  }, {
    key: "Undefined",
    value: function Undefined() {
      var _objectSpread37;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread37 = {}, _defineProperty(_objectSpread37, exports.Kind, 'Undefined'), _defineProperty(_objectSpread37, "type", 'object'), _defineProperty(_objectSpread37, "specialized", 'Undefined'), _objectSpread37)));
    }
  }, {
    key: "Union",
    value: function Union(items) {
      var _objectSpread38;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return items.length === 0 ? exports.Type.Never(_objectSpread({}, options)) : this.Create(_objectSpread({}, options, (_objectSpread38 = {}, _defineProperty(_objectSpread38, exports.Kind, 'Union'), _defineProperty(_objectSpread38, "anyOf", items), _objectSpread38)));
    }
    /** Creates a Uint8Array type */

  }, {
    key: "Uint8Array",
    value: function Uint8Array() {
      var _objectSpread39;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread39 = {}, _defineProperty(_objectSpread39, exports.Kind, 'Uint8Array'), _defineProperty(_objectSpread39, "type", 'object'), _defineProperty(_objectSpread39, "specialized", 'Uint8Array'), _objectSpread39)));
    }
    /** Creates an unknown type */

  }, {
    key: "Unknown",
    value: function Unknown() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, _defineProperty({}, exports.Kind, 'Unknown')));
    }
    /** Creates a user defined schema that infers as type T  */

  }, {
    key: "Unsafe",
    value: function Unsafe() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, _defineProperty({}, exports.Kind, options[exports.Kind] || 'Unsafe')));
    }
    /** Creates a void type */

  }, {
    key: "Void",
    value: function Void() {
      var _objectSpread42;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.Create(_objectSpread({}, options, (_objectSpread42 = {}, _defineProperty(_objectSpread42, exports.Kind, 'Void'), _defineProperty(_objectSpread42, "type", 'null'), _objectSpread42)));
    }
    /** Use this function to return TSchema with static and params omitted */

  }, {
    key: "Create",
    value: function Create(schema) {
      return schema;
    }
    /** Clones the given value */

  }, {
    key: "Clone",
    value: function Clone(value) {
      var _this2 = this;

      var isObject = function isObject(object) {
        return _typeof(object) === 'object' && object !== null && !Array.isArray(object);
      };

      var isArray = function isArray(object) {
        return _typeof(object) === 'object' && object !== null && Array.isArray(object);
      };

      if (isObject(value)) {
        return Object.keys(value).reduce(function (acc, key) {
          return _objectSpread({}, acc, _defineProperty({}, key, _this2.Clone(value[key])));
        }, Object.getOwnPropertySymbols(value).reduce(function (acc, key) {
          return _objectSpread({}, acc, _defineProperty({}, key, _this2.Clone(value[key])));
        }, {}));
      } else if (isArray(value)) {
        return value.map(function (item) {
          return _this2.Clone(item);
        });
      } else {
        return value;
      }
    }
  }]);

  return TypeBuilder;
}();

exports.TypeBuilder = TypeBuilder;
/** JSON Schema Type Builder with Static Type Resolution for TypeScript */

exports.Type = new TypeBuilder();