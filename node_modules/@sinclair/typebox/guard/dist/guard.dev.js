"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/guard

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, dTribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeGuard = exports.TypeGuardInvalidTypeError = void 0;

var Types = require("../typebox");

var TypeGuardInvalidTypeError =
/*#__PURE__*/
function (_Error) {
  _inherits(TypeGuardInvalidTypeError, _Error);

  function TypeGuardInvalidTypeError(schema) {
    var _this;

    _classCallCheck(this, TypeGuardInvalidTypeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TypeGuardInvalidTypeError).call(this, 'TypeGuard: Invalid type'));
    _this.schema = schema;
    return _this;
  }

  return TypeGuardInvalidTypeError;
}(_wrapNativeSuper(Error));

exports.TypeGuardInvalidTypeError = TypeGuardInvalidTypeError;
/** TypeGuard tests that values conform to a known TypeBox type specification */

var TypeGuard;

(function (TypeGuard) {
  function IsObject(value) {
    return _typeof(value) === 'object' && value !== null && !Array.isArray(value);
  }

  function IsArray(value) {
    return _typeof(value) === 'object' && value !== null && Array.isArray(value);
  }

  function IsPattern(value) {
    try {
      new RegExp(value);
      return true;
    } catch (_unused) {
      return false;
    }
  }

  function IsControlCharacterFree(value) {
    if (typeof value !== 'string') return false;

    for (var i = 0; i < value.length; i++) {
      var code = value.charCodeAt(i);

      if (code >= 7 && code <= 13 || code === 27 || code === 127) {
        return false;
      }
    }

    return true;
  }

  function IsString(value) {
    return typeof value === 'string';
  }

  function IsNumber(value) {
    return typeof value === 'number';
  }

  function IsBoolean(value) {
    return typeof value === 'boolean';
  }

  function IsOptionalNumber(value) {
    return value === undefined || value !== undefined && IsNumber(value);
  }

  function IsOptionalBoolean(value) {
    return value === undefined || value !== undefined && IsBoolean(value);
  }

  function IsOptionalString(value) {
    return value === undefined || value !== undefined && IsString(value);
  }

  function IsOptionalPattern(value) {
    return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value) && IsPattern(value);
  }

  function IsOptionalFormat(value) {
    return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value);
  }
  /** Returns true if the given schema is TAny */


  function TAny(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Any' && IsOptionalString(schema.$id);
  }

  TypeGuard.TAny = TAny;
  /** Returns true if the given schema is TArray */

  function TArray(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Array' && schema.type === 'array' && IsOptionalString(schema.$id) && TSchema(schema.items) && IsOptionalNumber(schema.minItems) && IsOptionalNumber(schema.maxItems) && IsOptionalBoolean(schema.uniqueItems);
  }

  TypeGuard.TArray = TArray;
  /** Returns true if the given schema is TBoolean */

  function TBoolean(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Boolean' && schema.type === 'boolean' && IsOptionalString(schema.$id);
  }

  TypeGuard.TBoolean = TBoolean;
  /** Returns true if the given schema is TConstructor */

  function TConstructor(schema) {
    if (!(IsObject(schema) && schema[Types.Kind] === 'Constructor' && schema.type === 'constructor' && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {
      return false;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = schema.parameters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var parameter = _step.value;
        if (!TSchema(parameter)) return false;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return true;
  }

  TypeGuard.TConstructor = TConstructor;
  /** Returns true if the given schema is TFunction */

  function TFunction(schema) {
    if (!(IsObject(schema) && schema[Types.Kind] === 'Function' && schema.type === 'function' && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {
      return false;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = schema.parameters[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var parameter = _step2.value;
        if (!TSchema(parameter)) return false;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return true;
  }

  TypeGuard.TFunction = TFunction;
  /** Returns true if the given schema is TInteger */

  function TInteger(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Integer' && schema.type === 'integer' && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);
  }

  TypeGuard.TInteger = TInteger;
  /** Returns true if the given schema is TLiteral */

  function TLiteral(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Literal' && IsOptionalString(schema.$id) && (IsString(schema["const"]) || IsNumber(schema["const"]) || IsBoolean(schema["const"]));
  }

  TypeGuard.TLiteral = TLiteral;
  /** Returns true if the given schema is TNever */

  function TNever(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Never' && IsArray(schema.allOf) && schema.allOf.length === 2 && IsObject(schema.allOf[0]) && IsString(schema.allOf[0].type) && schema.allOf[0].type === 'boolean' && schema.allOf[0]["const"] === false && IsObject(schema.allOf[1]) && IsString(schema.allOf[1].type) && schema.allOf[1].type === 'boolean' && schema.allOf[1]["const"] === true;
  }

  TypeGuard.TNever = TNever;
  /** Returns true if the given schema is TNull */

  function TNull(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Null' && schema.type === 'null' && IsOptionalString(schema.$id);
  }

  TypeGuard.TNull = TNull;
  /** Returns true if the given schema is TNumber */

  function TNumber(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Number' && schema.type === 'number' && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);
  }

  TypeGuard.TNumber = TNumber;
  /** Returns true if the given schema is TObject */

  function TObject(schema) {
    if (!(IsObject(schema) && schema[Types.Kind] === 'Object' && schema.type === 'object' && IsOptionalString(schema.$id) && IsObject(schema.properties) && IsOptionalBoolean(schema.additionalProperties) && IsOptionalNumber(schema.minProperties) && IsOptionalNumber(schema.maxProperties))) {
      return false;
    }

    for (var _i = 0, _Object$entries = Object.entries(schema.properties); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      if (!IsControlCharacterFree(key)) return false;
      if (!TSchema(value)) return false;
    }

    return true;
  }

  TypeGuard.TObject = TObject;
  /** Returns true if the given schema is TPromise */

  function TPromise(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Promise' && schema.type === 'promise' && IsOptionalString(schema.$id) && TSchema(schema.item);
  }

  TypeGuard.TPromise = TPromise;
  /** Returns true if the given schema is TRecord */

  function TRecord(schema) {
    if (!(IsObject(schema) && schema[Types.Kind] === 'Record' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.additionalProperties === false && IsObject(schema.patternProperties))) {
      return false;
    }

    var keys = Object.keys(schema.patternProperties);

    if (keys.length !== 1) {
      return false;
    }

    if (!IsPattern(keys[0])) {
      return false;
    }

    if (!TSchema(schema.patternProperties[keys[0]])) {
      return false;
    }

    return true;
  }

  TypeGuard.TRecord = TRecord;
  /** Returns true if the given schema is TSelf */

  function TSelf(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Self' && IsOptionalString(schema.$id) && IsString(schema.$ref);
  }

  TypeGuard.TSelf = TSelf;
  /** Returns true if the given schema is TRef */

  function TRef(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Ref' && IsOptionalString(schema.$id) && IsString(schema.$ref);
  }

  TypeGuard.TRef = TRef;
  /** Returns true if the given schema is TString */

  function TString(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'String' && schema.type === 'string' && IsOptionalString(schema.$id) && IsOptionalNumber(schema.minLength) && IsOptionalNumber(schema.maxLength) && IsOptionalPattern(schema.pattern) && IsOptionalFormat(schema.format);
  }

  TypeGuard.TString = TString;
  /** Returns true if the given schema is TTuple */

  function TTuple(schema) {
    if (!(IsObject(schema) && schema[Types.Kind] === 'Tuple' && schema.type === 'array' && IsOptionalString(schema.$id) && IsNumber(schema.minItems) && IsNumber(schema.maxItems) && schema.minItems === schema.maxItems)) {
      return false;
    }

    if (schema.items === undefined && schema.additionalItems === undefined && schema.minItems === 0) {
      return true;
    }

    if (!IsArray(schema.items)) {
      return false;
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = schema.items[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var inner = _step3.value;
        if (!TSchema(inner)) return false;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return true;
  }

  TypeGuard.TTuple = TTuple;
  /** Returns true if the given schema is TUndefined */

  function TUndefined(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Undefined' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.specialized === 'Undefined';
  }

  TypeGuard.TUndefined = TUndefined;
  /** Returns true if the given schema is TUnion */

  function TUnion(schema) {
    if (!(IsObject(schema) && schema[Types.Kind] === 'Union' && IsArray(schema.anyOf) && IsOptionalString(schema.$id))) {
      return false;
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = schema.anyOf[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var inner = _step4.value;
        if (!TSchema(inner)) return false;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return true;
  }

  TypeGuard.TUnion = TUnion;
  /** Returns true if the given schema is TUint8Array */

  function TUint8Array(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Uint8Array' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.specialized === 'Uint8Array' && IsOptionalNumber(schema.minByteLength) && IsOptionalNumber(schema.maxByteLength);
  }

  TypeGuard.TUint8Array = TUint8Array;
  /** Returns true if the given schema is TUnknown */

  function TUnknown(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Unknown' && IsOptionalString(schema.$id);
  }

  TypeGuard.TUnknown = TUnknown;
  /** Returns true if the given schema is TVoid */

  function TVoid(schema) {
    return IsObject(schema) && schema[Types.Kind] === 'Void' && schema.type === 'null' && IsOptionalString(schema.$id);
  }

  TypeGuard.TVoid = TVoid;
  /** Returns true if the given schema is TSchema */

  function TSchema(schema) {
    return TAny(schema) || TArray(schema) || TBoolean(schema) || TConstructor(schema) || TFunction(schema) || TInteger(schema) || TLiteral(schema) || TNever(schema) || TNull(schema) || TNumber(schema) || TObject(schema) || TPromise(schema) || TRecord(schema) || TSelf(schema) || TRef(schema) || TString(schema) || TTuple(schema) || TUndefined(schema) || TUnion(schema) || TUint8Array(schema) || TUnknown(schema) || TVoid(schema);
  }

  TypeGuard.TSchema = TSchema;
  /** Asserts if this schema and associated references are valid. */

  function Assert(schema) {
    var references = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    if (!TSchema(schema)) throw new TypeGuardInvalidTypeError(schema);
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = references[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _schema = _step5.value;
        if (!TSchema(_schema)) throw new TypeGuardInvalidTypeError(_schema);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
          _iterator5["return"]();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  }

  TypeGuard.Assert = Assert;
})(TypeGuard = exports.TypeGuard || (exports.TypeGuard = {}));