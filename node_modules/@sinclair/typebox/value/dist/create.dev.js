"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/value

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueCreate = exports.ValueCreateNeverTypeError = exports.ValueCreateUnknownTypeError = void 0;

var Types = require("../typebox");

var ValueCreateUnknownTypeError =
/*#__PURE__*/
function (_Error) {
  _inherits(ValueCreateUnknownTypeError, _Error);

  function ValueCreateUnknownTypeError(schema) {
    var _this;

    _classCallCheck(this, ValueCreateUnknownTypeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValueCreateUnknownTypeError).call(this, 'ValueCreate: Unknown type'));
    _this.schema = schema;
    return _this;
  }

  return ValueCreateUnknownTypeError;
}(_wrapNativeSuper(Error));

exports.ValueCreateUnknownTypeError = ValueCreateUnknownTypeError;

var ValueCreateNeverTypeError =
/*#__PURE__*/
function (_Error2) {
  _inherits(ValueCreateNeverTypeError, _Error2);

  function ValueCreateNeverTypeError(schema) {
    var _this2;

    _classCallCheck(this, ValueCreateNeverTypeError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ValueCreateNeverTypeError).call(this, 'ValueCreate: Never types cannot be created'));
    _this2.schema = schema;
    return _this2;
  }

  return ValueCreateNeverTypeError;
}(_wrapNativeSuper(Error));

exports.ValueCreateNeverTypeError = ValueCreateNeverTypeError;
var ValueCreate;

(function (ValueCreate) {
  function Any(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      return {};
    }
  }

  function Array(schema, references) {
    if (schema.uniqueItems === true && schema["default"] === undefined) {
      throw new Error('ValueCreate.Array: Arrays with uniqueItems require a default value');
    } else if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (schema.minItems !== undefined) {
      return globalThis.Array.from({
        length: schema.minItems
      }).map(function (item) {
        return ValueCreate.Create(schema.items, references);
      });
    } else {
      return [];
    }
  }

  function Boolean(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      return false;
    }
  }

  function Constructor(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      var value = ValueCreate.Create(schema.returns, references);

      if (_typeof(value) === 'object' && !globalThis.Array.isArray(value)) {
        return (
          /*#__PURE__*/
          function () {
            function _class() {
              _classCallCheck(this, _class);

              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = globalThis.Object.entries(value)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _step$value = _slicedToArray(_step.value, 2),
                      key = _step$value[0],
                      val = _step$value[1];

                  var self = this;
                  self[key] = val;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }

            return _class;
          }()
        );
      } else {
        return (
          /*#__PURE__*/
          function () {
            function _class2() {
              _classCallCheck(this, _class2);
            }

            return _class2;
          }()
        );
      }
    }
  }

  function Enum(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (schema.anyOf.length === 0) {
      throw new Error('ValueCreate.Enum: Cannot create default enum value as this enum has no items');
    } else {
      return schema.anyOf[0]["const"];
    }
  }

  function Function(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      return function () {
        return ValueCreate.Create(schema.returns, references);
      };
    }
  }

  function Integer(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (schema.minimum !== undefined) {
      return schema.minimum;
    } else {
      return 0;
    }
  }

  function Literal(schema, references) {
    return schema["const"];
  }

  function Never(schema, references) {
    throw new ValueCreateNeverTypeError(schema);
  }

  function Null(schema, references) {
    return null;
  }

  function Number(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (schema.minimum !== undefined) {
      return schema.minimum;
    } else {
      return 0;
    }
  }

  function Object(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      var required = new Set(schema.required);
      return schema["default"] || globalThis.Object.entries(schema.properties).reduce(function (acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            schema = _ref2[1];

        return required.has(key) ? _objectSpread({}, acc, _defineProperty({}, key, ValueCreate.Create(schema, references))) : _objectSpread({}, acc);
      }, {});
    }
  }

  function Promise(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      return globalThis.Promise.resolve(ValueCreate.Create(schema.item, references));
    }
  }

  function Record(schema, references) {
    var _globalThis$Object$en = _slicedToArray(globalThis.Object.entries(schema.patternProperties)[0], 2),
        keyPattern = _globalThis$Object$en[0],
        valueSchema = _globalThis$Object$en[1];

    if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (!(keyPattern === '^.*$' || keyPattern === '^(0|[1-9][0-9]*)$')) {
      var propertyKeys = keyPattern.slice(1, keyPattern.length - 1).split('|');
      return propertyKeys.reduce(function (acc, key) {
        return _objectSpread({}, acc, _defineProperty({}, key, Create(valueSchema, references)));
      }, {});
    } else {
      return {};
    }
  }

  function Recursive(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      throw new Error('ValueCreate.Recursive: Recursive types require a default value');
    }
  }

  function Ref(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      var reference = references.find(function (reference) {
        return reference.$id === schema.$ref;
      });
      if (reference === undefined) throw new Error("ValueCreate.Ref: Cannot find schema with $id '".concat(schema.$ref, "'."));
      return Visit(reference, references);
    }
  }

  function Self(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      var reference = references.find(function (reference) {
        return reference.$id === schema.$ref;
      });
      if (reference === undefined) throw new Error("ValueCreate.Self: Cannot locate schema with $id '".concat(schema.$ref, "'"));
      return Visit(reference, references);
    }
  }

  function String(schema, references) {
    if (schema.pattern !== undefined) {
      if (schema["default"] === undefined) {
        throw new Error('ValueCreate.String: String types with patterns must specify a default value');
      } else {
        return schema["default"];
      }
    } else if (schema.format !== undefined) {
      if (schema["default"] === undefined) {
        throw new Error('ValueCreate.String: String types with formats must specify a default value');
      } else {
        return schema["default"];
      }
    } else {
      if (schema["default"] !== undefined) {
        return schema["default"];
      } else if (schema.minLength !== undefined) {
        return globalThis.Array.from({
          length: schema.minLength
        }).map(function () {
          return '.';
        }).join('');
      } else {
        return '';
      }
    }
  }

  function Tuple(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    }

    if (schema.items === undefined) {
      return [];
    } else {
      return globalThis.Array.from({
        length: schema.minItems
      }).map(function (_, index) {
        return ValueCreate.Create(schema.items[index], references);
      });
    }
  }

  function Undefined(schema, references) {
    return undefined;
  }

  function Union(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (schema.anyOf.length === 0) {
      throw new Error('ValueCreate.Union: Cannot create Union with zero variants');
    } else {
      return ValueCreate.Create(schema.anyOf[0], references);
    }
  }

  function Uint8Array(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else if (schema.minByteLength !== undefined) {
      return new globalThis.Uint8Array(schema.minByteLength);
    } else {
      return new globalThis.Uint8Array(0);
    }
  }

  function Unknown(schema, references) {
    if (schema["default"] !== undefined) {
      return schema["default"];
    } else {
      return {};
    }
  }

  function Void(schema, references) {
    return null;
  }
  /** Creates a value from the given schema. If the schema specifies a default value, then that value is returned. */


  function Visit(schema, references) {
    var anyReferences = schema.$id === undefined ? references : [schema].concat(_toConsumableArray(references));
    var anySchema = schema;

    switch (anySchema[Types.Kind]) {
      case 'Any':
        return Any(anySchema, anyReferences);

      case 'Array':
        return Array(anySchema, anyReferences);

      case 'Boolean':
        return Boolean(anySchema, anyReferences);

      case 'Constructor':
        return Constructor(anySchema, anyReferences);

      case 'Enum':
        return Enum(anySchema, anyReferences);

      case 'Function':
        return Function(anySchema, anyReferences);

      case 'Integer':
        return Integer(anySchema, anyReferences);

      case 'Literal':
        return Literal(anySchema, anyReferences);

      case 'Never':
        return Never(anySchema, anyReferences);

      case 'Null':
        return Null(anySchema, anyReferences);

      case 'Number':
        return Number(anySchema, anyReferences);

      case 'Object':
        return Object(anySchema, anyReferences);

      case 'Promise':
        return Promise(anySchema, anyReferences);

      case 'Record':
        return Record(anySchema, anyReferences);

      case 'Rec':
        return Recursive(anySchema, anyReferences);

      case 'Ref':
        return Ref(anySchema, anyReferences);

      case 'Self':
        return Self(anySchema, anyReferences);

      case 'String':
        return String(anySchema, anyReferences);

      case 'Tuple':
        return Tuple(anySchema, anyReferences);

      case 'Undefined':
        return Undefined(anySchema, anyReferences);

      case 'Union':
        return Union(anySchema, anyReferences);

      case 'Uint8Array':
        return Uint8Array(anySchema, anyReferences);

      case 'Unknown':
        return Unknown(anySchema, anyReferences);

      case 'Void':
        return Void(anySchema, anyReferences);

      default:
        throw new ValueCreateUnknownTypeError(anySchema);
    }
  }

  ValueCreate.Visit = Visit;

  function Create(schema, references) {
    return Visit(schema, references);
  }

  ValueCreate.Create = Create;
})(ValueCreate = exports.ValueCreate || (exports.ValueCreate = {}));