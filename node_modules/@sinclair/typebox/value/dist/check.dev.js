"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/value

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueCheck = exports.ValueCheckUnknownTypeError = void 0;

var Types = require("../typebox");

var format_1 = require("../format");

var ValueCheckUnknownTypeError =
/*#__PURE__*/
function (_Error) {
  _inherits(ValueCheckUnknownTypeError, _Error);

  function ValueCheckUnknownTypeError(schema) {
    var _this;

    _classCallCheck(this, ValueCheckUnknownTypeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValueCheckUnknownTypeError).call(this, 'ValueCheck: Unknown type'));
    _this.schema = schema;
    return _this;
  }

  return ValueCheckUnknownTypeError;
}(_wrapNativeSuper(Error));

exports.ValueCheckUnknownTypeError = ValueCheckUnknownTypeError;
var ValueCheck;

(function (ValueCheck) {
  function Any(schema, references, value) {
    return true;
  }

  function Array(schema, references, value) {
    if (!globalThis.Array.isArray(value)) {
      return false;
    }

    if (schema.minItems !== undefined && !(value.length >= schema.minItems)) {
      return false;
    }

    if (schema.maxItems !== undefined && !(value.length <= schema.maxItems)) {
      return false;
    }

    if (schema.uniqueItems === true && !(new Set(value).size === value.length)) {
      return false;
    }

    return value.every(function (val) {
      return Visit(schema.items, references, val);
    });
  }

  function Boolean(schema, references, value) {
    return typeof value === 'boolean';
  }

  function Constructor(schema, references, value) {
    return Visit(schema.returns, references, value.prototype);
  }

  function Function(schema, references, value) {
    return typeof value === 'function';
  }

  function Integer(schema, references, value) {
    if (!(typeof value === 'number')) {
      return false;
    }

    if (!globalThis.Number.isInteger(value)) {
      return false;
    }

    if (schema.multipleOf !== undefined && !(value % schema.multipleOf === 0)) {
      return false;
    }

    if (schema.exclusiveMinimum !== undefined && !(value > schema.exclusiveMinimum)) {
      return false;
    }

    if (schema.exclusiveMaximum !== undefined && !(value < schema.exclusiveMaximum)) {
      return false;
    }

    if (schema.minimum !== undefined && !(value >= schema.minimum)) {
      return false;
    }

    if (schema.maximum !== undefined && !(value <= schema.maximum)) {
      return false;
    }

    return true;
  }

  function Literal(schema, references, value) {
    return value === schema["const"];
  }

  function Never(schema, references, value) {
    return false;
  }

  function Null(schema, references, value) {
    return value === null;
  }

  function Number(schema, references, value) {
    if (!(typeof value === 'number')) {
      return false;
    }

    if (schema.multipleOf && !(value % schema.multipleOf === 0)) {
      return false;
    }

    if (schema.exclusiveMinimum && !(value > schema.exclusiveMinimum)) {
      return false;
    }

    if (schema.exclusiveMaximum && !(value < schema.exclusiveMaximum)) {
      return false;
    }

    if (schema.minimum && !(value >= schema.minimum)) {
      return false;
    }

    if (schema.maximum && !(value <= schema.maximum)) {
      return false;
    }

    return true;
  }

  function Object(schema, references, value) {
    if (!(_typeof(value) === 'object' && value !== null && !globalThis.Array.isArray(value))) {
      return false;
    }

    if (schema.minProperties !== undefined && !(globalThis.Object.keys(value).length >= schema.minProperties)) {
      return false;
    }

    if (schema.maxProperties !== undefined && !(globalThis.Object.keys(value).length <= schema.maxProperties)) {
      return false;
    }

    var propertyKeys = globalThis.Object.keys(schema.properties);

    if (schema.additionalProperties === false) {
      // optimization: If the property key length matches the required keys length
      // then we only need check that the values property key length matches that
      // of the property key length. This is because exhaustive testing for values
      // will occur in subsequent property tests.
      if (schema.required && schema.required.length === propertyKeys.length && !(globalThis.Object.keys(value).length === propertyKeys.length)) {
        return false;
      } else {
        if (!globalThis.Object.keys(value).every(function (key) {
          return propertyKeys.includes(key);
        })) {
          return false;
        }
      }
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = propertyKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var propertyKey = _step.value;
        var propertySchema = schema.properties[propertyKey];

        if (schema.required && schema.required.includes(propertyKey)) {
          if (!Visit(propertySchema, references, value[propertyKey])) {
            return false;
          }
        } else {
          if (value[propertyKey] !== undefined) {
            if (!Visit(propertySchema, references, value[propertyKey])) {
              return false;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return true;
  }

  function Promise(schema, references, value) {
    return _typeof(value) === 'object' && typeof value.then === 'function';
  }

  function Record(schema, references, value) {
    if (!(_typeof(value) === 'object' && value !== null && !globalThis.Array.isArray(value))) {
      return false;
    }

    var _globalThis$Object$en = _slicedToArray(globalThis.Object.entries(schema.patternProperties)[0], 2),
        keyPattern = _globalThis$Object$en[0],
        valueSchema = _globalThis$Object$en[1];

    var regex = new RegExp(keyPattern);

    if (!globalThis.Object.keys(value).every(function (key) {
      return regex.test(key);
    })) {
      return false;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = globalThis.Object.values(value)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var propValue = _step2.value;
        if (!Visit(valueSchema, references, propValue)) return false;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return true;
  }

  function Ref(schema, references, value) {
    var reference = references.find(function (reference) {
      return reference.$id === schema.$ref;
    });
    if (reference === undefined) throw new Error("ValueCheck.Ref: Cannot find schema with $id '".concat(schema.$ref, "'."));
    return Visit(reference, references, value);
  }

  function Self(schema, references, value) {
    var reference = references.find(function (reference) {
      return reference.$id === schema.$ref;
    });
    if (reference === undefined) throw new Error("ValueCheck.Self: Cannot find schema with $id '".concat(schema.$ref, "'."));
    return Visit(reference, references, value);
  }

  function String(schema, references, value) {
    if (!(typeof value === 'string')) {
      return false;
    }

    if (schema.minLength !== undefined) {
      if (!(value.length >= schema.minLength)) return false;
    }

    if (schema.maxLength !== undefined) {
      if (!(value.length <= schema.maxLength)) return false;
    }

    if (schema.pattern !== undefined) {
      var regex = new RegExp(schema.pattern);
      if (!regex.test(value)) return false;
    }

    if (schema.format !== undefined) {
      if (!format_1.Format.Has(schema.format)) return false;
      var func = format_1.Format.Get(schema.format);
      return func(value);
    }

    return true;
  }

  function Tuple(schema, references, value) {
    if (!globalThis.Array.isArray(value)) {
      return false;
    }

    if (schema.items === undefined && !(value.length === 0)) {
      return false;
    }

    if (!(value.length === schema.maxItems)) {
      return false;
    }

    if (!schema.items) {
      return true;
    }

    for (var i = 0; i < schema.items.length; i++) {
      if (!Visit(schema.items[i], references, value[i])) return false;
    }

    return true;
  }

  function Undefined(schema, references, value) {
    return value === undefined;
  }

  function Union(schema, references, value) {
    return schema.anyOf.some(function (inner) {
      return Visit(inner, references, value);
    });
  }

  function Uint8Array(schema, references, value) {
    if (!(value instanceof globalThis.Uint8Array)) {
      return false;
    }

    if (schema.maxByteLength && !(value.length <= schema.maxByteLength)) {
      return false;
    }

    if (schema.minByteLength && !(value.length >= schema.minByteLength)) {
      return false;
    }

    return true;
  }

  function Unknown(schema, references, value) {
    return true;
  }

  function Void(schema, references, value) {
    return value === null;
  }

  function Visit(schema, references, value) {
    var anyReferences = schema.$id === undefined ? references : [schema].concat(_toConsumableArray(references));
    var anySchema = schema;

    switch (anySchema[Types.Kind]) {
      case 'Any':
        return Any(anySchema, anyReferences, value);

      case 'Array':
        return Array(anySchema, anyReferences, value);

      case 'Boolean':
        return Boolean(anySchema, anyReferences, value);

      case 'Constructor':
        return Constructor(anySchema, anyReferences, value);

      case 'Function':
        return Function(anySchema, anyReferences, value);

      case 'Integer':
        return Integer(anySchema, anyReferences, value);

      case 'Literal':
        return Literal(anySchema, anyReferences, value);

      case 'Never':
        return Never(anySchema, anyReferences, value);

      case 'Null':
        return Null(anySchema, anyReferences, value);

      case 'Number':
        return Number(anySchema, anyReferences, value);

      case 'Object':
        return Object(anySchema, anyReferences, value);

      case 'Promise':
        return Promise(anySchema, anyReferences, value);

      case 'Record':
        return Record(anySchema, anyReferences, value);

      case 'Ref':
        return Ref(anySchema, anyReferences, value);

      case 'Self':
        return Self(anySchema, anyReferences, value);

      case 'String':
        return String(anySchema, anyReferences, value);

      case 'Tuple':
        return Tuple(anySchema, anyReferences, value);

      case 'Undefined':
        return Undefined(anySchema, anyReferences, value);

      case 'Union':
        return Union(anySchema, anyReferences, value);

      case 'Uint8Array':
        return Uint8Array(anySchema, anyReferences, value);

      case 'Unknown':
        return Unknown(anySchema, anyReferences, value);

      case 'Void':
        return Void(anySchema, anyReferences, value);

      default:
        throw new ValueCheckUnknownTypeError(anySchema);
    }
  } // -------------------------------------------------------------------------
  // Check
  // -------------------------------------------------------------------------


  function Check(schema, references, value) {
    return schema.$id === undefined ? Visit(schema, references, value) : Visit(schema, [schema].concat(_toConsumableArray(references)), value);
  }

  ValueCheck.Check = Check;
})(ValueCheck = exports.ValueCheck || (exports.ValueCheck = {}));