"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/value

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValuePointer = exports.ValuePointerRootDeleteError = exports.ValuePointerRootSetError = void 0;

var ValuePointerRootSetError =
/*#__PURE__*/
function (_Error) {
  _inherits(ValuePointerRootSetError, _Error);

  function ValuePointerRootSetError(value, path, update) {
    var _this;

    _classCallCheck(this, ValuePointerRootSetError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValuePointerRootSetError).call(this, 'ValuePointer: Cannot set root value'));
    _this.value = value;
    _this.path = path;
    _this.update = update;
    return _this;
  }

  return ValuePointerRootSetError;
}(_wrapNativeSuper(Error));

exports.ValuePointerRootSetError = ValuePointerRootSetError;

var ValuePointerRootDeleteError =
/*#__PURE__*/
function (_Error2) {
  _inherits(ValuePointerRootDeleteError, _Error2);

  function ValuePointerRootDeleteError(value, path) {
    var _this2;

    _classCallCheck(this, ValuePointerRootDeleteError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ValuePointerRootDeleteError).call(this, 'ValuePointer: Cannot delete root value'));
    _this2.value = value;
    _this2.path = path;
    return _this2;
  }

  return ValuePointerRootDeleteError;
}(_wrapNativeSuper(Error));

exports.ValuePointerRootDeleteError = ValuePointerRootDeleteError;
/** ValuePointer performs mutable operations on values using RFC6901 Json Pointers */

var ValuePointer;

(function (ValuePointer) {
  var _marked =
  /*#__PURE__*/
  regeneratorRuntime.mark(Format);

  function Escape(component) {
    return component.indexOf('~') === -1 ? component : component.replace(/~1/g, '/').replace(/~0/g, '~');
  }
  /** Formats the given pointer into navigable key components */


  function Format(pointer) {
    var start, end, i, _char;

    return regeneratorRuntime.wrap(function Format$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(pointer === '')) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            start = 0, end = 0;
            i = 0;

          case 4:
            if (!(i < pointer.length)) {
              _context.next = 21;
              break;
            }

            _char = pointer.charAt(i);

            if (!(_char === '/')) {
              _context.next = 17;
              break;
            }

            if (!(i === 0)) {
              _context.next = 11;
              break;
            }

            start = i + 1;
            _context.next = 15;
            break;

          case 11:
            end = i;
            _context.next = 14;
            return Escape(pointer.slice(start, end));

          case 14:
            start = i + 1;

          case 15:
            _context.next = 18;
            break;

          case 17:
            end = i;

          case 18:
            i++;
            _context.next = 4;
            break;

          case 21:
            _context.next = 23;
            return Escape(pointer.slice(start));

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _marked);
  }

  ValuePointer.Format = Format;
  /** Sets the value at the given pointer. If the value at the pointer does not exist it is created */

  function Set(value, pointer, update) {
    if (pointer === '') throw new ValuePointerRootSetError(value, pointer, update);
    var owner = null,
        next = value,
        key = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Format(pointer)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var component = _step.value;
        if (next[component] === undefined) next[component] = {};
        owner = next;
        next = next[component];
        key = component;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    owner[key] = update;
  }

  ValuePointer.Set = Set;
  /** Deletes a value at the given pointer */

  function Delete(value, pointer) {
    if (pointer === '') throw new ValuePointerRootDeleteError(value, pointer);
    var owner = null,
        next = value,
        key = '';
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Format(pointer)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var component = _step2.value;
        if (next[component] === undefined || next[component] === null) return;
        owner = next;
        next = next[component];
        key = component;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (globalThis.Array.isArray(owner)) {
      var index = parseInt(key);
      owner.splice(index, 1);
    } else {
      delete owner[key];
    }
  }

  ValuePointer.Delete = Delete;
  /** Returns true if a value exists at the given pointer */

  function Has(value, pointer) {
    if (pointer === '') return true;
    var owner = null,
        next = value,
        key = '';
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = Format(pointer)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var component = _step3.value;
        if (next[component] === undefined) return false;
        owner = next;
        next = next[component];
        key = component;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return globalThis.Object.getOwnPropertyNames(owner).includes(key);
  }

  ValuePointer.Has = Has;
  /** Gets the value at the given pointer */

  function Get(value, pointer) {
    if (pointer === '') return value;
    var current = value;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = Format(pointer)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var component = _step4.value;
        if (current[component] === undefined) return undefined;
        current = current[component];
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return current;
  }

  ValuePointer.Get = Get;
})(ValuePointer = exports.ValuePointer || (exports.ValuePointer = {}));