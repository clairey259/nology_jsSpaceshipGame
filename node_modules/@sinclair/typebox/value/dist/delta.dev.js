"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/value

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueDelta = void 0;

var is_1 = require("./is");

var clone_1 = require("./clone");

var pointer_1 = require("./pointer");

var ValueDelta;

(function (ValueDelta) {
  var _marked =
  /*#__PURE__*/
  regeneratorRuntime.mark(Object),
      _marked2 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Array),
      _marked3 =
  /*#__PURE__*/
  regeneratorRuntime.mark(TypedArray),
      _marked4 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Value),
      _marked5 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Visit);

  // ---------------------------------------------------------------------
  // Edits
  // ---------------------------------------------------------------------
  function Update(path, value) {
    return {
      type: 'update',
      path: path,
      value: value
    };
  }

  function Insert(path, value) {
    return {
      type: 'insert',
      path: path,
      value: value
    };
  }

  function Delete(path) {
    return {
      type: 'delete',
      path: path
    };
  } // ---------------------------------------------------------------------
  // Diff
  // ---------------------------------------------------------------------


  function Object(path, current, next) {
    var currentKeys, nextKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _key, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _key2, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _key3;

    return regeneratorRuntime.wrap(function Object$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (is_1.Is.Object(next)) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return Update(path, next);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
            currentKeys = [].concat(_toConsumableArray(globalThis.Object.keys(current)), _toConsumableArray(globalThis.Object.getOwnPropertySymbols(current)));
            nextKeys = [].concat(_toConsumableArray(globalThis.Object.keys(next)), _toConsumableArray(globalThis.Object.getOwnPropertySymbols(next)));
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 9;
            _iterator = currentKeys[Symbol.iterator]();

          case 11:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 21;
              break;
            }

            key = _step.value;

            if (!(_typeof(key) === 'symbol')) {
              _context.next = 15;
              break;
            }

            throw Error('ValueDelta: Cannot produce diff symbol keys');

          case 15:
            if (!(next[key] === undefined && nextKeys.includes(key))) {
              _context.next = 18;
              break;
            }

            _context.next = 18;
            return Update("".concat(path, "/").concat(String(key)), undefined);

          case 18:
            _iteratorNormalCompletion = true;
            _context.next = 11;
            break;

          case 21:
            _context.next = 27;
            break;

          case 23:
            _context.prev = 23;
            _context.t0 = _context["catch"](9);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 27:
            _context.prev = 27;
            _context.prev = 28;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 30:
            _context.prev = 30;

            if (!_didIteratorError) {
              _context.next = 33;
              break;
            }

            throw _iteratorError;

          case 33:
            return _context.finish(30);

          case 34:
            return _context.finish(27);

          case 35:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context.prev = 38;
            _iterator2 = nextKeys[Symbol.iterator]();

          case 40:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context.next = 50;
              break;
            }

            _key = _step2.value;

            if (!(current[_key] === undefined || next[_key] === undefined)) {
              _context.next = 44;
              break;
            }

            return _context.abrupt("continue", 47);

          case 44:
            if (!(_typeof(_key) === 'symbol')) {
              _context.next = 46;
              break;
            }

            throw Error('ValueDelta: Cannot produce diff symbol keys');

          case 46:
            return _context.delegateYield(Visit("".concat(path, "/").concat(String(_key)), current[_key], next[_key]), "t1", 47);

          case 47:
            _iteratorNormalCompletion2 = true;
            _context.next = 40;
            break;

          case 50:
            _context.next = 56;
            break;

          case 52:
            _context.prev = 52;
            _context.t2 = _context["catch"](38);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t2;

          case 56:
            _context.prev = 56;
            _context.prev = 57;

            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }

          case 59:
            _context.prev = 59;

            if (!_didIteratorError2) {
              _context.next = 62;
              break;
            }

            throw _iteratorError2;

          case 62:
            return _context.finish(59);

          case 63:
            return _context.finish(56);

          case 64:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context.prev = 67;
            _iterator3 = nextKeys[Symbol.iterator]();

          case 69:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              _context.next = 79;
              break;
            }

            _key2 = _step3.value;

            if (!(_typeof(_key2) === 'symbol')) {
              _context.next = 73;
              break;
            }

            throw Error('ValueDelta: Cannot produce diff symbol keys');

          case 73:
            if (!(current[_key2] === undefined)) {
              _context.next = 76;
              break;
            }

            _context.next = 76;
            return Insert("".concat(path, "/").concat(String(_key2)), next[_key2]);

          case 76:
            _iteratorNormalCompletion3 = true;
            _context.next = 69;
            break;

          case 79:
            _context.next = 85;
            break;

          case 81:
            _context.prev = 81;
            _context.t3 = _context["catch"](67);
            _didIteratorError3 = true;
            _iteratorError3 = _context.t3;

          case 85:
            _context.prev = 85;
            _context.prev = 86;

            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }

          case 88:
            _context.prev = 88;

            if (!_didIteratorError3) {
              _context.next = 91;
              break;
            }

            throw _iteratorError3;

          case 91:
            return _context.finish(88);

          case 92:
            return _context.finish(85);

          case 93:
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context.prev = 96;
            _iterator4 = currentKeys.reverse()[Symbol.iterator]();

          case 98:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              _context.next = 108;
              break;
            }

            _key3 = _step4.value;

            if (!(_typeof(_key3) === 'symbol')) {
              _context.next = 102;
              break;
            }

            throw Error('ValueDelta: Cannot produce diff symbol keys');

          case 102:
            if (!(next[_key3] === undefined && !nextKeys.includes(_key3))) {
              _context.next = 105;
              break;
            }

            _context.next = 105;
            return Delete("".concat(path, "/").concat(String(_key3)));

          case 105:
            _iteratorNormalCompletion4 = true;
            _context.next = 98;
            break;

          case 108:
            _context.next = 114;
            break;

          case 110:
            _context.prev = 110;
            _context.t4 = _context["catch"](96);
            _didIteratorError4 = true;
            _iteratorError4 = _context.t4;

          case 114:
            _context.prev = 114;
            _context.prev = 115;

            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }

          case 117:
            _context.prev = 117;

            if (!_didIteratorError4) {
              _context.next = 120;
              break;
            }

            throw _iteratorError4;

          case 120:
            return _context.finish(117);

          case 121:
            return _context.finish(114);

          case 122:
          case "end":
            return _context.stop();
        }
      }
    }, _marked, null, [[9, 23, 27, 35], [28,, 30, 34], [38, 52, 56, 64], [57,, 59, 63], [67, 81, 85, 93], [86,, 88, 92], [96, 110, 114, 122], [115,, 117, 121]]);
  }

  function Array(path, current, next) {
    var i, _i, _i2;

    return regeneratorRuntime.wrap(function Array$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (is_1.Is.Array(next)) {
              _context2.next = 4;
              break;
            }

            _context2.next = 3;
            return Update(path, next);

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
            i = 0;

          case 5:
            if (!(i < Math.min(current.length, next.length))) {
              _context2.next = 10;
              break;
            }

            return _context2.delegateYield(Visit("".concat(path, "/").concat(i), current[i], next[i]), "t0", 7);

          case 7:
            i++;
            _context2.next = 5;
            break;

          case 10:
            _i = 0;

          case 11:
            if (!(_i < next.length)) {
              _context2.next = 19;
              break;
            }

            if (!(_i < current.length)) {
              _context2.next = 14;
              break;
            }

            return _context2.abrupt("continue", 16);

          case 14:
            _context2.next = 16;
            return Insert("".concat(path, "/").concat(_i), next[_i]);

          case 16:
            _i++;
            _context2.next = 11;
            break;

          case 19:
            _i2 = current.length - 1;

          case 20:
            if (!(_i2 >= 0)) {
              _context2.next = 28;
              break;
            }

            if (!(_i2 < next.length)) {
              _context2.next = 23;
              break;
            }

            return _context2.abrupt("continue", 25);

          case 23:
            _context2.next = 25;
            return Delete("".concat(path, "/").concat(_i2));

          case 25:
            _i2--;
            _context2.next = 20;
            break;

          case 28:
          case "end":
            return _context2.stop();
        }
      }
    }, _marked2);
  }

  function TypedArray(path, current, next) {
    var i;
    return regeneratorRuntime.wrap(function TypedArray$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(!is_1.Is.TypedArray(next) || current.length !== next.length || globalThis.Object.getPrototypeOf(current).constructor.name !== globalThis.Object.getPrototypeOf(next).constructor.name)) {
              _context3.next = 4;
              break;
            }

            _context3.next = 3;
            return Update(path, next);

          case 3:
            return _context3.abrupt("return", _context3.sent);

          case 4:
            i = 0;

          case 5:
            if (!(i < Math.min(current.length, next.length))) {
              _context3.next = 10;
              break;
            }

            return _context3.delegateYield(Visit("".concat(path, "/").concat(i), current[i], next[i]), "t0", 7);

          case 7:
            i++;
            _context3.next = 5;
            break;

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _marked3);
  }

  function Value(path, current, next) {
    return regeneratorRuntime.wrap(function Value$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(current === next)) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return");

          case 2:
            _context4.next = 4;
            return Update(path, next);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _marked4);
  }

  function Visit(path, current, next) {
    return regeneratorRuntime.wrap(function Visit$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!is_1.Is.Object(current)) {
              _context5.next = 5;
              break;
            }

            return _context5.delegateYield(Object(path, current, next), "t0", 2);

          case 2:
            return _context5.abrupt("return", _context5.t0);

          case 5:
            if (!is_1.Is.Array(current)) {
              _context5.next = 10;
              break;
            }

            return _context5.delegateYield(Array(path, current, next), "t1", 7);

          case 7:
            return _context5.abrupt("return", _context5.t1);

          case 10:
            if (!is_1.Is.TypedArray(current)) {
              _context5.next = 15;
              break;
            }

            return _context5.delegateYield(TypedArray(path, current, next), "t2", 12);

          case 12:
            return _context5.abrupt("return", _context5.t2);

          case 15:
            if (!is_1.Is.Value(current)) {
              _context5.next = 20;
              break;
            }

            return _context5.delegateYield(Value(path, current, next), "t3", 17);

          case 17:
            return _context5.abrupt("return", _context5.t3);

          case 20:
            throw new Error('ValueDelta: Cannot produce edits for value');

          case 21:
          case "end":
            return _context5.stop();
        }
      }
    }, _marked5);
  }

  function Diff(current, next) {
    return _toConsumableArray(Visit('', current, next));
  }

  ValueDelta.Diff = Diff; // ---------------------------------------------------------------------
  // Patch
  // ---------------------------------------------------------------------

  function IsRootUpdate(edits) {
    return edits.length > 0 && edits[0].path === '' && edits[0].type === 'update';
  }

  function IsIdentity(edits) {
    return edits.length === 0;
  }

  function Patch(current, edits) {
    if (IsRootUpdate(edits)) {
      return clone_1.ValueClone.Clone(edits[0].value);
    }

    if (IsIdentity(edits)) {
      return clone_1.ValueClone.Clone(current);
    }

    var clone = clone_1.ValueClone.Clone(current);
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = edits[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var edit = _step5.value;

        switch (edit.type) {
          case 'insert':
            {
              pointer_1.ValuePointer.Set(clone, edit.path, edit.value);
              break;
            }

          case 'update':
            {
              pointer_1.ValuePointer.Set(clone, edit.path, edit.value);
              break;
            }

          case 'delete':
            {
              pointer_1.ValuePointer.Delete(clone, edit.path);
              break;
            }
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
          _iterator5["return"]();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    return clone;
  }

  ValueDelta.Patch = Patch;
})(ValueDelta = exports.ValueDelta || (exports.ValueDelta = {}));