"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/value

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Value = void 0;

var index_1 = require("../errors/index");

var equal_1 = require("./equal");

var cast_1 = require("./cast");

var clone_1 = require("./clone");

var create_1 = require("./create");

var check_1 = require("./check");

var delta_1 = require("./delta");
/** Value performs immutable operations on values */


var Value;

(function (Value) {
  var _marked =
  /*#__PURE__*/
  regeneratorRuntime.mark(Errors);

  function Cast() {
    var _ref = arguments.length === 3 ? [arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]] : [arguments.length <= 0 ? undefined : arguments[0], [], arguments.length <= 1 ? undefined : arguments[1]],
        _ref2 = _slicedToArray(_ref, 3),
        schema = _ref2[0],
        references = _ref2[1],
        value = _ref2[2];

    return cast_1.ValueCast.Cast(schema, references, value);
  }

  Value.Cast = Cast;

  function Create() {
    var _ref3 = arguments.length === 2 ? [arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]] : [arguments.length <= 0 ? undefined : arguments[0], []],
        _ref4 = _slicedToArray(_ref3, 2),
        schema = _ref4[0],
        references = _ref4[1];

    return create_1.ValueCreate.Create(schema, references);
  }

  Value.Create = Create;

  function Check() {
    var _ref5 = arguments.length === 3 ? [arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]] : [arguments.length <= 0 ? undefined : arguments[0], [], arguments.length <= 1 ? undefined : arguments[1]],
        _ref6 = _slicedToArray(_ref5, 3),
        schema = _ref6[0],
        references = _ref6[1],
        value = _ref6[2];

    return check_1.ValueCheck.Check(schema, references, value);
  }

  Value.Check = Check;

  function Errors() {
    var _ref7,
        _ref8,
        schema,
        references,
        value,
        _args = arguments;

    return regeneratorRuntime.wrap(function Errors$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref7 = _args.length === 3 ? [_args.length <= 0 ? undefined : _args[0], _args.length <= 1 ? undefined : _args[1], _args.length <= 2 ? undefined : _args[2]] : [_args.length <= 0 ? undefined : _args[0], [], _args.length <= 1 ? undefined : _args[1]], _ref8 = _slicedToArray(_ref7, 3), schema = _ref8[0], references = _ref8[1], value = _ref8[2];
            return _context.delegateYield(index_1.ValueErrors.Errors(schema, references, value), "t0", 2);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _marked);
  }

  Value.Errors = Errors;
  /** Returns true if left and right values are structurally equal */

  function Equal(left, right) {
    return equal_1.ValueEqual.Equal(left, right);
  }

  Value.Equal = Equal;
  /** Returns a structural clone of the given value */

  function Clone(value) {
    return clone_1.ValueClone.Clone(value);
  }

  Value.Clone = Clone;
  /** Returns edits to transform the current value into the next value */

  function Diff(current, next) {
    return delta_1.ValueDelta.Diff(current, next);
  }

  Value.Diff = Diff;
  /** Returns a new value with edits applied to the given value */

  function Patch(current, edits) {
    return delta_1.ValueDelta.Patch(current, edits);
  }

  Value.Patch = Patch;
})(Value = exports.Value || (exports.Value = {}));