"use strict";
/*--------------------------------------------------------------------------

@sinclair/typebox/errors

The MIT License (MIT)

Copyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueErrors = exports.ValueErrorsUnknownTypeError = exports.ValueErrorType = void 0;

var Types = require("../typebox");

var index_1 = require("../format/index"); // -------------------------------------------------------------------
// ValueErrorType
// -------------------------------------------------------------------


var ValueErrorType;

(function (ValueErrorType) {
  ValueErrorType[ValueErrorType["Array"] = 0] = "Array";
  ValueErrorType[ValueErrorType["ArrayMinItems"] = 1] = "ArrayMinItems";
  ValueErrorType[ValueErrorType["ArrayMaxItems"] = 2] = "ArrayMaxItems";
  ValueErrorType[ValueErrorType["ArrayUniqueItems"] = 3] = "ArrayUniqueItems";
  ValueErrorType[ValueErrorType["Boolean"] = 4] = "Boolean";
  ValueErrorType[ValueErrorType["Function"] = 5] = "Function";
  ValueErrorType[ValueErrorType["Integer"] = 6] = "Integer";
  ValueErrorType[ValueErrorType["IntegerMultipleOf"] = 7] = "IntegerMultipleOf";
  ValueErrorType[ValueErrorType["IntegerExclusiveMinimum"] = 8] = "IntegerExclusiveMinimum";
  ValueErrorType[ValueErrorType["IntegerExclusiveMaximum"] = 9] = "IntegerExclusiveMaximum";
  ValueErrorType[ValueErrorType["IntegerMinimum"] = 10] = "IntegerMinimum";
  ValueErrorType[ValueErrorType["IntegerMaximum"] = 11] = "IntegerMaximum";
  ValueErrorType[ValueErrorType["Literal"] = 12] = "Literal";
  ValueErrorType[ValueErrorType["Never"] = 13] = "Never";
  ValueErrorType[ValueErrorType["Null"] = 14] = "Null";
  ValueErrorType[ValueErrorType["Number"] = 15] = "Number";
  ValueErrorType[ValueErrorType["NumberMultipleOf"] = 16] = "NumberMultipleOf";
  ValueErrorType[ValueErrorType["NumberExclusiveMinimum"] = 17] = "NumberExclusiveMinimum";
  ValueErrorType[ValueErrorType["NumberExclusiveMaximum"] = 18] = "NumberExclusiveMaximum";
  ValueErrorType[ValueErrorType["NumberMinumum"] = 19] = "NumberMinumum";
  ValueErrorType[ValueErrorType["NumberMaximum"] = 20] = "NumberMaximum";
  ValueErrorType[ValueErrorType["Object"] = 21] = "Object";
  ValueErrorType[ValueErrorType["ObjectMinProperties"] = 22] = "ObjectMinProperties";
  ValueErrorType[ValueErrorType["ObjectMaxProperties"] = 23] = "ObjectMaxProperties";
  ValueErrorType[ValueErrorType["ObjectAdditionalProperties"] = 24] = "ObjectAdditionalProperties";
  ValueErrorType[ValueErrorType["Promise"] = 25] = "Promise";
  ValueErrorType[ValueErrorType["RecordKeyNumeric"] = 26] = "RecordKeyNumeric";
  ValueErrorType[ValueErrorType["RecordKeyString"] = 27] = "RecordKeyString";
  ValueErrorType[ValueErrorType["String"] = 28] = "String";
  ValueErrorType[ValueErrorType["StringMinLength"] = 29] = "StringMinLength";
  ValueErrorType[ValueErrorType["StringMaxLength"] = 30] = "StringMaxLength";
  ValueErrorType[ValueErrorType["StringPattern"] = 31] = "StringPattern";
  ValueErrorType[ValueErrorType["StringFormatUnknown"] = 32] = "StringFormatUnknown";
  ValueErrorType[ValueErrorType["StringFormat"] = 33] = "StringFormat";
  ValueErrorType[ValueErrorType["TupleZeroLength"] = 34] = "TupleZeroLength";
  ValueErrorType[ValueErrorType["TupleLength"] = 35] = "TupleLength";
  ValueErrorType[ValueErrorType["Undefined"] = 36] = "Undefined";
  ValueErrorType[ValueErrorType["Union"] = 37] = "Union";
  ValueErrorType[ValueErrorType["Uint8Array"] = 38] = "Uint8Array";
  ValueErrorType[ValueErrorType["Uint8ArrayMinByteLength"] = 39] = "Uint8ArrayMinByteLength";
  ValueErrorType[ValueErrorType["Uint8ArrayMaxByteLength"] = 40] = "Uint8ArrayMaxByteLength";
  ValueErrorType[ValueErrorType["Void"] = 41] = "Void";
})(ValueErrorType = exports.ValueErrorType || (exports.ValueErrorType = {})); // -------------------------------------------------------------------
// ValueErrors
// -------------------------------------------------------------------


var ValueErrorsUnknownTypeError =
/*#__PURE__*/
function (_Error) {
  _inherits(ValueErrorsUnknownTypeError, _Error);

  function ValueErrorsUnknownTypeError(schema) {
    var _this;

    _classCallCheck(this, ValueErrorsUnknownTypeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValueErrorsUnknownTypeError).call(this, 'ValueErrors: Unknown type'));
    _this.schema = schema;
    return _this;
  }

  return ValueErrorsUnknownTypeError;
}(_wrapNativeSuper(Error));

exports.ValueErrorsUnknownTypeError = ValueErrorsUnknownTypeError;
var ValueErrors;

(function (ValueErrors) {
  var _marked =
  /*#__PURE__*/
  regeneratorRuntime.mark(Any),
      _marked2 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Array),
      _marked3 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Boolean),
      _marked4 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Constructor),
      _marked5 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Function),
      _marked6 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Integer),
      _marked7 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Literal),
      _marked8 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Never),
      _marked9 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Null),
      _marked10 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Number),
      _marked11 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Object),
      _marked12 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Promise),
      _marked13 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Record),
      _marked14 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Ref),
      _marked15 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Self),
      _marked16 =
  /*#__PURE__*/
  regeneratorRuntime.mark(String),
      _marked17 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Tuple),
      _marked18 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Undefined),
      _marked19 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Union),
      _marked20 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Uint8Array),
      _marked21 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Unknown),
      _marked22 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Void),
      _marked23 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Visit),
      _marked24 =
  /*#__PURE__*/
  regeneratorRuntime.mark(Errors);

  function Any(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Any$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }
    }, _marked);
  }

  function Array(schema, references, path, value) {
    var i;
    return regeneratorRuntime.wrap(function Array$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (globalThis.Array.isArray(value)) {
              _context2.next = 4;
              break;
            }

            _context2.next = 3;
            return {
              type: ValueErrorType.Array,
              schema: schema,
              path: path,
              value: value,
              message: "Expected array"
            };

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
            if (!(schema.minItems !== undefined && !(value.length >= schema.minItems))) {
              _context2.next = 7;
              break;
            }

            _context2.next = 7;
            return {
              type: ValueErrorType.ArrayMinItems,
              schema: schema,
              path: path,
              value: value,
              message: "Expected array length to be greater or equal to ".concat(schema.minItems)
            };

          case 7:
            if (!(schema.maxItems !== undefined && !(value.length <= schema.maxItems))) {
              _context2.next = 10;
              break;
            }

            _context2.next = 10;
            return {
              type: ValueErrorType.ArrayMinItems,
              schema: schema,
              path: path,
              value: value,
              message: "Expected array length to be less or equal to ".concat(schema.maxItems)
            };

          case 10:
            if (!(schema.uniqueItems === true && !(new Set(value).size === value.length))) {
              _context2.next = 13;
              break;
            }

            _context2.next = 13;
            return {
              type: ValueErrorType.ArrayUniqueItems,
              schema: schema,
              path: path,
              value: value,
              message: "Expected array elements to be unique"
            };

          case 13:
            i = 0;

          case 14:
            if (!(i < value.length)) {
              _context2.next = 19;
              break;
            }

            return _context2.delegateYield(Visit(schema.items, references, "".concat(path, "/").concat(i), value[i]), "t0", 16);

          case 16:
            i++;
            _context2.next = 14;
            break;

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _marked2);
  }

  function Boolean(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Boolean$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (typeof value === 'boolean') {
              _context3.next = 4;
              break;
            }

            _context3.next = 3;
            return {
              type: ValueErrorType.Boolean,
              schema: schema,
              path: path,
              value: value,
              message: "Expected boolean"
            };

          case 3:
            return _context3.abrupt("return", _context3.sent);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _marked3);
  }

  function Constructor(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Constructor$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.delegateYield(Visit(schema.returns, references, path, value.prototype), "t0", 1);

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _marked4);
  }

  function Function(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Function$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (typeof value === 'function') {
              _context5.next = 4;
              break;
            }

            _context5.next = 3;
            return {
              type: ValueErrorType.Function,
              schema: schema,
              path: path,
              value: value,
              message: "Expected function"
            };

          case 3:
            return _context5.abrupt("return", _context5.sent);

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _marked5);
  }

  function Integer(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Integer$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (typeof value === 'number') {
              _context6.next = 4;
              break;
            }

            _context6.next = 3;
            return {
              type: ValueErrorType.Number,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number"
            };

          case 3:
            return _context6.abrupt("return", _context6.sent);

          case 4:
            if (globalThis.Number.isInteger(value)) {
              _context6.next = 7;
              break;
            }

            _context6.next = 7;
            return {
              type: ValueErrorType.Integer,
              schema: schema,
              path: path,
              value: value,
              message: "Expected integer"
            };

          case 7:
            if (!(schema.multipleOf && !(value % schema.multipleOf === 0))) {
              _context6.next = 10;
              break;
            }

            _context6.next = 10;
            return {
              type: ValueErrorType.IntegerMultipleOf,
              schema: schema,
              path: path,
              value: value,
              message: "Expected integer to be a multiple of ".concat(schema.multipleOf)
            };

          case 10:
            if (!(schema.exclusiveMinimum && !(value > schema.exclusiveMinimum))) {
              _context6.next = 13;
              break;
            }

            _context6.next = 13;
            return {
              type: ValueErrorType.IntegerExclusiveMinimum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected integer to be greater than ".concat(schema.exclusiveMinimum)
            };

          case 13:
            if (!(schema.exclusiveMaximum && !(value < schema.exclusiveMaximum))) {
              _context6.next = 16;
              break;
            }

            _context6.next = 16;
            return {
              type: ValueErrorType.IntegerExclusiveMaximum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected integer to be less than ".concat(schema.exclusiveMaximum)
            };

          case 16:
            if (!(schema.minimum && !(value >= schema.minimum))) {
              _context6.next = 19;
              break;
            }

            _context6.next = 19;
            return {
              type: ValueErrorType.IntegerMinimum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected integer to be greater or equal to ".concat(schema.minimum)
            };

          case 19:
            if (!(schema.maximum && !(value <= schema.maximum))) {
              _context6.next = 22;
              break;
            }

            _context6.next = 22;
            return {
              type: ValueErrorType.IntegerMaximum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected integer to be less or equal to ".concat(schema.maximum)
            };

          case 22:
          case "end":
            return _context6.stop();
        }
      }
    }, _marked6);
  }

  function Literal(schema, references, path, value) {
    var error;
    return regeneratorRuntime.wrap(function Literal$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (value === schema["const"]) {
              _context7.next = 5;
              break;
            }

            error = typeof schema["const"] === 'string' ? "'".concat(schema["const"], "'") : schema["const"];
            _context7.next = 4;
            return {
              type: ValueErrorType.Literal,
              schema: schema,
              path: path,
              value: value,
              message: "Expected ".concat(error)
            };

          case 4:
            return _context7.abrupt("return", _context7.sent);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _marked7);
  }

  function Never(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Never$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return {
              type: ValueErrorType.Never,
              schema: schema,
              path: path,
              value: value,
              message: "Value cannot be validated"
            };

          case 2:
          case "end":
            return _context8.stop();
        }
      }
    }, _marked8);
  }

  function Null(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Null$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (value === null) {
              _context9.next = 4;
              break;
            }

            _context9.next = 3;
            return {
              type: ValueErrorType.Null,
              schema: schema,
              path: path,
              value: value,
              message: "Expected null"
            };

          case 3:
            return _context9.abrupt("return", _context9.sent);

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _marked9);
  }

  function Number(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Number$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (typeof value === 'number') {
              _context10.next = 4;
              break;
            }

            _context10.next = 3;
            return {
              type: ValueErrorType.Number,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number"
            };

          case 3:
            return _context10.abrupt("return", _context10.sent);

          case 4:
            if (!(schema.multipleOf && !(value % schema.multipleOf === 0))) {
              _context10.next = 7;
              break;
            }

            _context10.next = 7;
            return {
              type: ValueErrorType.NumberMultipleOf,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number to be a multiple of ".concat(schema.multipleOf)
            };

          case 7:
            if (!(schema.exclusiveMinimum && !(value > schema.exclusiveMinimum))) {
              _context10.next = 10;
              break;
            }

            _context10.next = 10;
            return {
              type: ValueErrorType.NumberExclusiveMinimum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number to be greater than ".concat(schema.exclusiveMinimum)
            };

          case 10:
            if (!(schema.exclusiveMaximum && !(value < schema.exclusiveMaximum))) {
              _context10.next = 13;
              break;
            }

            _context10.next = 13;
            return {
              type: ValueErrorType.NumberExclusiveMaximum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number to be less than ".concat(schema.exclusiveMaximum)
            };

          case 13:
            if (!(schema.minimum && !(value >= schema.minimum))) {
              _context10.next = 16;
              break;
            }

            _context10.next = 16;
            return {
              type: ValueErrorType.NumberMaximum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number to be greater or equal to ".concat(schema.minimum)
            };

          case 16:
            if (!(schema.maximum && !(value <= schema.maximum))) {
              _context10.next = 19;
              break;
            }

            _context10.next = 19;
            return {
              type: ValueErrorType.NumberMinumum,
              schema: schema,
              path: path,
              value: value,
              message: "Expected number to be less or equal to ".concat(schema.maximum)
            };

          case 19:
          case "end":
            return _context10.stop();
        }
      }
    }, _marked10);
  }

  function Object(schema, references, path, value) {
    var propertyKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, propKey, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, propertyKey, propertySchema;

    return regeneratorRuntime.wrap(function Object$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (_typeof(value) === 'object' && value !== null && !globalThis.Array.isArray(value)) {
              _context11.next = 4;
              break;
            }

            _context11.next = 3;
            return {
              type: ValueErrorType.Object,
              schema: schema,
              path: path,
              value: value,
              message: "Expected object"
            };

          case 3:
            return _context11.abrupt("return", _context11.sent);

          case 4:
            if (!(schema.minProperties !== undefined && !(globalThis.Object.keys(value).length >= schema.minProperties))) {
              _context11.next = 7;
              break;
            }

            _context11.next = 7;
            return {
              type: ValueErrorType.ObjectMinProperties,
              schema: schema,
              path: path,
              value: value,
              message: "Expected object to have at least ".concat(schema.minProperties, " properties")
            };

          case 7:
            if (!(schema.maxProperties !== undefined && !(globalThis.Object.keys(value).length <= schema.maxProperties))) {
              _context11.next = 10;
              break;
            }

            _context11.next = 10;
            return {
              type: ValueErrorType.ObjectMaxProperties,
              schema: schema,
              path: path,
              value: value,
              message: "Expected object to have less than ".concat(schema.minProperties, " properties")
            };

          case 10:
            propertyKeys = globalThis.Object.keys(schema.properties);

            if (!(schema.additionalProperties === false)) {
              _context11.next = 39;
              break;
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context11.prev = 15;
            _iterator = globalThis.Object.keys(value)[Symbol.iterator]();

          case 17:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context11.next = 25;
              break;
            }

            propKey = _step.value;

            if (propertyKeys.includes(propKey)) {
              _context11.next = 22;
              break;
            }

            _context11.next = 22;
            return {
              type: ValueErrorType.ObjectAdditionalProperties,
              schema: schema,
              path: "".concat(path, "/").concat(propKey),
              value: value[propKey],
              message: 'Unexpected property'
            };

          case 22:
            _iteratorNormalCompletion = true;
            _context11.next = 17;
            break;

          case 25:
            _context11.next = 31;
            break;

          case 27:
            _context11.prev = 27;
            _context11.t0 = _context11["catch"](15);
            _didIteratorError = true;
            _iteratorError = _context11.t0;

          case 31:
            _context11.prev = 31;
            _context11.prev = 32;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 34:
            _context11.prev = 34;

            if (!_didIteratorError) {
              _context11.next = 37;
              break;
            }

            throw _iteratorError;

          case 37:
            return _context11.finish(34);

          case 38:
            return _context11.finish(31);

          case 39:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context11.prev = 42;
            _iterator2 = propertyKeys[Symbol.iterator]();

          case 44:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context11.next = 56;
              break;
            }

            propertyKey = _step2.value;
            propertySchema = schema.properties[propertyKey];

            if (!(schema.required && schema.required.includes(propertyKey))) {
              _context11.next = 51;
              break;
            }

            return _context11.delegateYield(Visit(propertySchema, references, "".concat(path, "/").concat(propertyKey), value[propertyKey]), "t1", 49);

          case 49:
            _context11.next = 53;
            break;

          case 51:
            if (!(value[propertyKey] !== undefined)) {
              _context11.next = 53;
              break;
            }

            return _context11.delegateYield(Visit(propertySchema, references, "".concat(path, "/").concat(propertyKey), value[propertyKey]), "t2", 53);

          case 53:
            _iteratorNormalCompletion2 = true;
            _context11.next = 44;
            break;

          case 56:
            _context11.next = 62;
            break;

          case 58:
            _context11.prev = 58;
            _context11.t3 = _context11["catch"](42);
            _didIteratorError2 = true;
            _iteratorError2 = _context11.t3;

          case 62:
            _context11.prev = 62;
            _context11.prev = 63;

            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }

          case 65:
            _context11.prev = 65;

            if (!_didIteratorError2) {
              _context11.next = 68;
              break;
            }

            throw _iteratorError2;

          case 68:
            return _context11.finish(65);

          case 69:
            return _context11.finish(62);

          case 70:
          case "end":
            return _context11.stop();
        }
      }
    }, _marked11, null, [[15, 27, 31, 39], [32,, 34, 38], [42, 58, 62, 70], [63,, 65, 69]]);
  }

  function Promise(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Promise$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (_typeof(value) === 'object' && typeof value.then === 'function') {
              _context12.next = 3;
              break;
            }

            _context12.next = 3;
            return {
              type: ValueErrorType.Promise,
              schema: schema,
              path: path,
              value: value,
              message: "Expected Promise"
            };

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _marked12);
  }

  function Record(schema, references, path, value) {
    var _globalThis$Object$en, keyPattern, valueSchema, regex, numeric, type, message, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, propKey, propValue;

    return regeneratorRuntime.wrap(function Record$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (_typeof(value) === 'object' && value !== null && !globalThis.Array.isArray(value)) {
              _context13.next = 4;
              break;
            }

            _context13.next = 3;
            return {
              type: ValueErrorType.Object,
              schema: schema,
              path: path,
              value: value,
              message: "Expected object"
            };

          case 3:
            return _context13.abrupt("return", _context13.sent);

          case 4:
            _globalThis$Object$en = _slicedToArray(globalThis.Object.entries(schema.patternProperties)[0], 2), keyPattern = _globalThis$Object$en[0], valueSchema = _globalThis$Object$en[1];
            regex = new RegExp(keyPattern);

            if (globalThis.Object.keys(value).every(function (key) {
              return regex.test(key);
            })) {
              _context13.next = 13;
              break;
            }

            numeric = keyPattern === '^(0|[1-9][0-9]*)$';
            type = numeric ? ValueErrorType.RecordKeyNumeric : ValueErrorType.RecordKeyString;
            message = numeric ? 'Expected all object property keys to be numeric' : 'Expected all object property keys to be strings';
            _context13.next = 12;
            return {
              type: type,
              schema: schema,
              path: path,
              value: value,
              message: message
            };

          case 12:
            return _context13.abrupt("return", _context13.sent);

          case 13:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context13.prev = 16;
            _iterator3 = globalThis.Object.entries(value)[Symbol.iterator]();

          case 18:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              _context13.next = 24;
              break;
            }

            _step3$value = _slicedToArray(_step3.value, 2), propKey = _step3$value[0], propValue = _step3$value[1];
            return _context13.delegateYield(Visit(valueSchema, references, "".concat(path, "/").concat(propKey), propValue), "t0", 21);

          case 21:
            _iteratorNormalCompletion3 = true;
            _context13.next = 18;
            break;

          case 24:
            _context13.next = 30;
            break;

          case 26:
            _context13.prev = 26;
            _context13.t1 = _context13["catch"](16);
            _didIteratorError3 = true;
            _iteratorError3 = _context13.t1;

          case 30:
            _context13.prev = 30;
            _context13.prev = 31;

            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }

          case 33:
            _context13.prev = 33;

            if (!_didIteratorError3) {
              _context13.next = 36;
              break;
            }

            throw _iteratorError3;

          case 36:
            return _context13.finish(33);

          case 37:
            return _context13.finish(30);

          case 38:
          case "end":
            return _context13.stop();
        }
      }
    }, _marked13, null, [[16, 26, 30, 38], [31,, 33, 37]]);
  }

  function Ref(schema, references, path, value) {
    var reference;
    return regeneratorRuntime.wrap(function Ref$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            reference = references.find(function (reference) {
              return reference.$id === schema.$ref;
            });

            if (!(reference === undefined)) {
              _context14.next = 3;
              break;
            }

            throw new Error("ValueErrors.Ref: Cannot find schema with $id '".concat(schema.$ref, "'."));

          case 3:
            return _context14.delegateYield(Visit(reference, references, path, value), "t0", 4);

          case 4:
          case "end":
            return _context14.stop();
        }
      }
    }, _marked14);
  }

  function Self(schema, references, path, value) {
    var reference;
    return regeneratorRuntime.wrap(function Self$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            reference = references.find(function (reference) {
              return reference.$id === schema.$ref;
            });

            if (!(reference === undefined)) {
              _context15.next = 3;
              break;
            }

            throw new Error("ValueErrors.Self: Cannot find schema with $id '".concat(schema.$ref, "'."));

          case 3:
            return _context15.delegateYield(Visit(reference, references, path, value), "t0", 4);

          case 4:
          case "end":
            return _context15.stop();
        }
      }
    }, _marked15);
  }

  function String(schema, references, path, value) {
    var regex, format;
    return regeneratorRuntime.wrap(function String$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (typeof value === 'string') {
              _context16.next = 4;
              break;
            }

            _context16.next = 3;
            return {
              type: ValueErrorType.String,
              schema: schema,
              path: path,
              value: value,
              message: 'Expected string'
            };

          case 3:
            return _context16.abrupt("return", _context16.sent);

          case 4:
            if (!(schema.minLength !== undefined && !(value.length >= schema.minLength))) {
              _context16.next = 7;
              break;
            }

            _context16.next = 7;
            return {
              type: ValueErrorType.StringMinLength,
              schema: schema,
              path: path,
              value: value,
              message: "Expected string length greater or equal to ".concat(schema.minLength)
            };

          case 7:
            if (!(schema.maxLength !== undefined && !(value.length <= schema.maxLength))) {
              _context16.next = 10;
              break;
            }

            _context16.next = 10;
            return {
              type: ValueErrorType.StringMaxLength,
              schema: schema,
              path: path,
              value: value,
              message: "Expected string length less or equal to ".concat(schema.maxLength)
            };

          case 10:
            if (!(schema.pattern !== undefined)) {
              _context16.next = 15;
              break;
            }

            regex = new RegExp(schema.pattern);

            if (regex.test(value)) {
              _context16.next = 15;
              break;
            }

            _context16.next = 15;
            return {
              type: ValueErrorType.StringPattern,
              schema: schema,
              path: path,
              value: value,
              message: "Expected string to match pattern ".concat(schema.pattern)
            };

          case 15:
            if (!(schema.format !== undefined)) {
              _context16.next = 25;
              break;
            }

            if (index_1.Format.Has(schema.format)) {
              _context16.next = 21;
              break;
            }

            _context16.next = 19;
            return {
              type: ValueErrorType.StringFormatUnknown,
              schema: schema,
              path: path,
              value: value,
              message: "Unknown string format '".concat(schema.format, "'")
            };

          case 19:
            _context16.next = 25;
            break;

          case 21:
            format = index_1.Format.Get(schema.format);

            if (format(value)) {
              _context16.next = 25;
              break;
            }

            _context16.next = 25;
            return {
              type: ValueErrorType.StringFormat,
              schema: schema,
              path: path,
              value: value,
              message: "Expected string to match format '".concat(schema.format, "'")
            };

          case 25:
          case "end":
            return _context16.stop();
        }
      }
    }, _marked16);
  }

  function Tuple(schema, references, path, value) {
    var i;
    return regeneratorRuntime.wrap(function Tuple$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (globalThis.Array.isArray(value)) {
              _context17.next = 4;
              break;
            }

            _context17.next = 3;
            return {
              type: ValueErrorType.Array,
              schema: schema,
              path: path,
              value: value,
              message: 'Expected Array'
            };

          case 3:
            return _context17.abrupt("return", _context17.sent);

          case 4:
            if (!(schema.items === undefined && !(value.length === 0))) {
              _context17.next = 8;
              break;
            }

            _context17.next = 7;
            return {
              type: ValueErrorType.TupleZeroLength,
              schema: schema,
              path: path,
              value: value,
              message: 'Expected tuple to have 0 elements'
            };

          case 7:
            return _context17.abrupt("return", _context17.sent);

          case 8:
            if (value.length === schema.maxItems) {
              _context17.next = 11;
              break;
            }

            _context17.next = 11;
            return {
              type: ValueErrorType.TupleLength,
              schema: schema,
              path: path,
              value: value,
              message: "Expected tuple to have ".concat(schema.maxItems, " elements")
            };

          case 11:
            if (schema.items) {
              _context17.next = 13;
              break;
            }

            return _context17.abrupt("return");

          case 13:
            i = 0;

          case 14:
            if (!(i < schema.items.length)) {
              _context17.next = 19;
              break;
            }

            return _context17.delegateYield(Visit(schema.items[i], references, "".concat(path, "/").concat(i), value[i]), "t0", 16);

          case 16:
            i++;
            _context17.next = 14;
            break;

          case 19:
          case "end":
            return _context17.stop();
        }
      }
    }, _marked17);
  }

  function Undefined(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Undefined$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (value === undefined) {
              _context18.next = 3;
              break;
            }

            _context18.next = 3;
            return {
              type: ValueErrorType.Undefined,
              schema: schema,
              path: path,
              value: value,
              message: "Expected undefined"
            };

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _marked18);
  }

  function Union(schema, references, path, value) {
    var errors, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, inner, variantErrors, _i2, _errors, error;

    return regeneratorRuntime.wrap(function Union$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            errors = [];
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context19.prev = 4;
            _iterator4 = schema.anyOf[Symbol.iterator]();

          case 6:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              _context19.next = 15;
              break;
            }

            inner = _step4.value;
            variantErrors = _toConsumableArray(Visit(inner, references, path, value));

            if (!(variantErrors.length === 0)) {
              _context19.next = 11;
              break;
            }

            return _context19.abrupt("return");

          case 11:
            errors.push.apply(errors, _toConsumableArray(variantErrors));

          case 12:
            _iteratorNormalCompletion4 = true;
            _context19.next = 6;
            break;

          case 15:
            _context19.next = 21;
            break;

          case 17:
            _context19.prev = 17;
            _context19.t0 = _context19["catch"](4);
            _didIteratorError4 = true;
            _iteratorError4 = _context19.t0;

          case 21:
            _context19.prev = 21;
            _context19.prev = 22;

            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }

          case 24:
            _context19.prev = 24;

            if (!_didIteratorError4) {
              _context19.next = 27;
              break;
            }

            throw _iteratorError4;

          case 27:
            return _context19.finish(24);

          case 28:
            return _context19.finish(21);

          case 29:
            _i2 = 0, _errors = errors;

          case 30:
            if (!(_i2 < _errors.length)) {
              _context19.next = 37;
              break;
            }

            error = _errors[_i2];
            _context19.next = 34;
            return error;

          case 34:
            _i2++;
            _context19.next = 30;
            break;

          case 37:
            if (!(errors.length > 0)) {
              _context19.next = 40;
              break;
            }

            _context19.next = 40;
            return {
              type: ValueErrorType.Union,
              schema: schema,
              path: path,
              value: value,
              message: 'Expected value of union'
            };

          case 40:
          case "end":
            return _context19.stop();
        }
      }
    }, _marked19, null, [[4, 17, 21, 29], [22,, 24, 28]]);
  }

  function Uint8Array(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Uint8Array$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (value instanceof globalThis.Uint8Array) {
              _context20.next = 4;
              break;
            }

            _context20.next = 3;
            return {
              type: ValueErrorType.Uint8Array,
              schema: schema,
              path: path,
              value: value,
              message: "Expected Uint8Array"
            };

          case 3:
            return _context20.abrupt("return", _context20.sent);

          case 4:
            if (!(schema.maxByteLength && !(value.length <= schema.maxByteLength))) {
              _context20.next = 7;
              break;
            }

            _context20.next = 7;
            return {
              type: ValueErrorType.Uint8ArrayMaxByteLength,
              schema: schema,
              path: path,
              value: value,
              message: "Expected Uint8Array to have a byte length less or equal to ".concat(schema.maxByteLength)
            };

          case 7:
            if (!(schema.minByteLength && !(value.length >= schema.minByteLength))) {
              _context20.next = 10;
              break;
            }

            _context20.next = 10;
            return {
              type: ValueErrorType.Uint8ArrayMinByteLength,
              schema: schema,
              path: path,
              value: value,
              message: "Expected Uint8Array to have a byte length greater or equal to ".concat(schema.maxByteLength)
            };

          case 10:
          case "end":
            return _context20.stop();
        }
      }
    }, _marked20);
  }

  function Unknown(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Unknown$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
          case "end":
            return _context21.stop();
        }
      }
    }, _marked21);
  }

  function Void(schema, references, path, value) {
    return regeneratorRuntime.wrap(function Void$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            if (value === null) {
              _context22.next = 4;
              break;
            }

            _context22.next = 3;
            return {
              type: ValueErrorType.Void,
              schema: schema,
              path: path,
              value: value,
              message: "Expected null"
            };

          case 3:
            return _context22.abrupt("return", _context22.sent);

          case 4:
          case "end":
            return _context22.stop();
        }
      }
    }, _marked22);
  }

  function Visit(schema, references, path, value) {
    var anyReferences, anySchema;
    return regeneratorRuntime.wrap(function Visit$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            anyReferences = schema.$id === undefined ? references : [schema].concat(_toConsumableArray(references));
            anySchema = schema;
            _context23.t0 = anySchema[Types.Kind];
            _context23.next = _context23.t0 === 'Any' ? 5 : _context23.t0 === 'Array' ? 7 : _context23.t0 === 'Boolean' ? 9 : _context23.t0 === 'Constructor' ? 11 : _context23.t0 === 'Function' ? 13 : _context23.t0 === 'Integer' ? 15 : _context23.t0 === 'Literal' ? 17 : _context23.t0 === 'Never' ? 19 : _context23.t0 === 'Null' ? 21 : _context23.t0 === 'Number' ? 23 : _context23.t0 === 'Object' ? 25 : _context23.t0 === 'Promise' ? 27 : _context23.t0 === 'Record' ? 29 : _context23.t0 === 'Ref' ? 31 : _context23.t0 === 'Self' ? 33 : _context23.t0 === 'String' ? 35 : _context23.t0 === 'Tuple' ? 37 : _context23.t0 === 'Undefined' ? 39 : _context23.t0 === 'Union' ? 41 : _context23.t0 === 'Uint8Array' ? 43 : _context23.t0 === 'Unknown' ? 45 : _context23.t0 === 'Void' ? 47 : 49;
            break;

          case 5:
            return _context23.delegateYield(Any(anySchema, anyReferences, path, value), "t1", 6);

          case 6:
            return _context23.abrupt("return", _context23.t1);

          case 7:
            return _context23.delegateYield(Array(anySchema, anyReferences, path, value), "t2", 8);

          case 8:
            return _context23.abrupt("return", _context23.t2);

          case 9:
            return _context23.delegateYield(Boolean(anySchema, anyReferences, path, value), "t3", 10);

          case 10:
            return _context23.abrupt("return", _context23.t3);

          case 11:
            return _context23.delegateYield(Constructor(anySchema, anyReferences, path, value), "t4", 12);

          case 12:
            return _context23.abrupt("return", _context23.t4);

          case 13:
            return _context23.delegateYield(Function(anySchema, anyReferences, path, value), "t5", 14);

          case 14:
            return _context23.abrupt("return", _context23.t5);

          case 15:
            return _context23.delegateYield(Integer(anySchema, anyReferences, path, value), "t6", 16);

          case 16:
            return _context23.abrupt("return", _context23.t6);

          case 17:
            return _context23.delegateYield(Literal(anySchema, anyReferences, path, value), "t7", 18);

          case 18:
            return _context23.abrupt("return", _context23.t7);

          case 19:
            return _context23.delegateYield(Never(anySchema, anyReferences, path, value), "t8", 20);

          case 20:
            return _context23.abrupt("return", _context23.t8);

          case 21:
            return _context23.delegateYield(Null(anySchema, anyReferences, path, value), "t9", 22);

          case 22:
            return _context23.abrupt("return", _context23.t9);

          case 23:
            return _context23.delegateYield(Number(anySchema, anyReferences, path, value), "t10", 24);

          case 24:
            return _context23.abrupt("return", _context23.t10);

          case 25:
            return _context23.delegateYield(Object(anySchema, anyReferences, path, value), "t11", 26);

          case 26:
            return _context23.abrupt("return", _context23.t11);

          case 27:
            return _context23.delegateYield(Promise(anySchema, anyReferences, path, value), "t12", 28);

          case 28:
            return _context23.abrupt("return", _context23.t12);

          case 29:
            return _context23.delegateYield(Record(anySchema, anyReferences, path, value), "t13", 30);

          case 30:
            return _context23.abrupt("return", _context23.t13);

          case 31:
            return _context23.delegateYield(Ref(anySchema, anyReferences, path, value), "t14", 32);

          case 32:
            return _context23.abrupt("return", _context23.t14);

          case 33:
            return _context23.delegateYield(Self(anySchema, anyReferences, path, value), "t15", 34);

          case 34:
            return _context23.abrupt("return", _context23.t15);

          case 35:
            return _context23.delegateYield(String(anySchema, anyReferences, path, value), "t16", 36);

          case 36:
            return _context23.abrupt("return", _context23.t16);

          case 37:
            return _context23.delegateYield(Tuple(anySchema, anyReferences, path, value), "t17", 38);

          case 38:
            return _context23.abrupt("return", _context23.t17);

          case 39:
            return _context23.delegateYield(Undefined(anySchema, anyReferences, path, value), "t18", 40);

          case 40:
            return _context23.abrupt("return", _context23.t18);

          case 41:
            return _context23.delegateYield(Union(anySchema, anyReferences, path, value), "t19", 42);

          case 42:
            return _context23.abrupt("return", _context23.t19);

          case 43:
            return _context23.delegateYield(Uint8Array(anySchema, anyReferences, path, value), "t20", 44);

          case 44:
            return _context23.abrupt("return", _context23.t20);

          case 45:
            return _context23.delegateYield(Unknown(anySchema, anyReferences, path, value), "t21", 46);

          case 46:
            return _context23.abrupt("return", _context23.t21);

          case 47:
            return _context23.delegateYield(Void(anySchema, anyReferences, path, value), "t22", 48);

          case 48:
            return _context23.abrupt("return", _context23.t22);

          case 49:
            throw new ValueErrorsUnknownTypeError(schema);

          case 50:
          case "end":
            return _context23.stop();
        }
      }
    }, _marked23);
  }

  function Errors(schema, references, value) {
    return regeneratorRuntime.wrap(function Errors$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            return _context24.delegateYield(Visit(schema, references, '', value), "t0", 1);

          case 1:
          case "end":
            return _context24.stop();
        }
      }
    }, _marked24);
  }

  ValueErrors.Errors = Errors;
})(ValueErrors = exports.ValueErrors || (exports.ValueErrors = {}));