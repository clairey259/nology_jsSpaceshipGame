'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = handleDeprecationWarnings;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestWatcher() {
  var data = require('jest-watcher');

  _jestWatcher = function _jestWatcher() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function handleDeprecationWarnings(pipe) {
  var stdin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.stdin;
  return new Promise(function (resolve, reject) {
    if (typeof stdin.setRawMode === 'function') {
      var messages = [_chalk()["default"].red('There are deprecation warnings.\n'), "".concat(_chalk()["default"].dim(" \u203A Press "), "Enter").concat(_chalk()["default"].dim(' to continue.')), "".concat(_chalk()["default"].dim(" \u203A Press "), "Esc").concat(_chalk()["default"].dim(' to exit.'))];
      pipe.write(messages.join('\n'));
      stdin.setRawMode(true);
      stdin.resume();
      stdin.setEncoding('utf8'); // this is a string since we set encoding above

      stdin.on('data', function (key) {
        if (key === _jestWatcher().KEYS.ENTER) {
          resolve();
        } else if ([_jestWatcher().KEYS.ESCAPE, _jestWatcher().KEYS.CONTROL_C, _jestWatcher().KEYS.CONTROL_D].indexOf(key) !== -1) {
          reject();
        }
      });
    } else {
      resolve();
    }
  });
}