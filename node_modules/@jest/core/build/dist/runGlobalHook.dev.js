'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = runGlobalHook;

function util() {
  var data = _interopRequireWildcard(require('util'));

  util = function util() {
    return data;
  };

  return data;
}

function _transform() {
  var data = require('@jest/transform');

  _transform = function _transform() {
    return data;
  };

  return data;
}

function _prettyFormat() {
  var data = _interopRequireDefault(require('pretty-format'));

  _prettyFormat = function _prettyFormat() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function runGlobalHook(_ref) {
  var allTests, globalConfig, moduleName, globalModulePaths, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret;

  return regeneratorRuntime.async(function runGlobalHook$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          allTests = _ref.allTests, globalConfig = _ref.globalConfig, moduleName = _ref.moduleName;
          globalModulePaths = new Set(allTests.map(function (test) {
            return test.context.config[moduleName];
          }));

          if (globalConfig[moduleName]) {
            globalModulePaths.add(globalConfig[moduleName]);
          }

          if (!(globalModulePaths.size > 0)) {
            _context3.next = 33;
            break;
          }

          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context3.prev = 7;

          _loop = function _loop() {
            var modulePath, correctConfig, projectConfig, transformer;
            return regeneratorRuntime.async(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    modulePath = _step.value;

                    if (modulePath) {
                      _context2.next = 3;
                      break;
                    }

                    return _context2.abrupt("return", "continue");

                  case 3:
                    correctConfig = allTests.find(function (t) {
                      return t.context.config[moduleName] === modulePath;
                    });
                    projectConfig = correctConfig ? correctConfig.context.config // Fallback to first config
                    : allTests[0].context.config;
                    _context2.next = 7;
                    return regeneratorRuntime.awrap((0, _transform().createScriptTransformer)(projectConfig));

                  case 7:
                    transformer = _context2.sent;
                    _context2.prev = 8;
                    _context2.next = 11;
                    return regeneratorRuntime.awrap(transformer.requireAndTranspileModule(modulePath, function _callee(globalModule) {
                      return regeneratorRuntime.async(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (!(typeof globalModule !== 'function')) {
                                _context.next = 2;
                                break;
                              }

                              throw new TypeError("".concat(moduleName, " file must export a function at ").concat(modulePath));

                            case 2:
                              _context.next = 4;
                              return regeneratorRuntime.awrap(globalModule(globalConfig, projectConfig));

                            case 4:
                            case "end":
                              return _context.stop();
                          }
                        }
                      });
                    }));

                  case 11:
                    _context2.next = 19;
                    break;

                  case 13:
                    _context2.prev = 13;
                    _context2.t0 = _context2["catch"](8);

                    if (!util().types.isNativeError(_context2.t0)) {
                      _context2.next = 18;
                      break;
                    }

                    _context2.t0.message = "Jest: Got error running ".concat(moduleName, " - ").concat(modulePath, ", reason: ").concat(_context2.t0.message);
                    throw _context2.t0;

                  case 18:
                    throw new Error("Jest: Got error running ".concat(moduleName, " - ").concat(modulePath, ", reason: ").concat((0, _prettyFormat()["default"])(_context2.t0, {
                      maxDepth: 3
                    })));

                  case 19:
                  case "end":
                    return _context2.stop();
                }
              }
            }, null, null, [[8, 13]]);
          };

          _iterator = globalModulePaths[Symbol.iterator]();

        case 10:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context3.next = 19;
            break;
          }

          _context3.next = 13;
          return regeneratorRuntime.awrap(_loop());

        case 13:
          _ret = _context3.sent;

          if (!(_ret === "continue")) {
            _context3.next = 16;
            break;
          }

          return _context3.abrupt("continue", 16);

        case 16:
          _iteratorNormalCompletion = true;
          _context3.next = 10;
          break;

        case 19:
          _context3.next = 25;
          break;

        case 21:
          _context3.prev = 21;
          _context3.t0 = _context3["catch"](7);
          _didIteratorError = true;
          _iteratorError = _context3.t0;

        case 25:
          _context3.prev = 25;
          _context3.prev = 26;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 28:
          _context3.prev = 28;

          if (!_didIteratorError) {
            _context3.next = 31;
            break;
          }

          throw _iteratorError;

        case 31:
          return _context3.finish(28);

        case 32:
          return _context3.finish(25);

        case 33:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[7, 21, 25, 33], [26,, 28, 32]]);
}