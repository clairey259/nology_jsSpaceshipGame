'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = generateEmptyCoverage;

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _istanbulLibCoverage() {
  var data = require('istanbul-lib-coverage');

  _istanbulLibCoverage = function _istanbulLibCoverage() {
    return data;
  };

  return data;
}

function _istanbulLibInstrument() {
  var data = require('istanbul-lib-instrument');

  _istanbulLibInstrument = function _istanbulLibInstrument() {
    return data;
  };

  return data;
}

function _transform() {
  var data = require('@jest/transform');

  _transform = function _transform() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function generateEmptyCoverage(source, filename, globalConfig, config, changedFiles, sourcesRelatedToTestsInChangedFiles) {
  var coverageOptions, coverageWorkerResult, stat, scriptTransformer, _ref, code, extracted;

  return regeneratorRuntime.async(function generateEmptyCoverage$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          coverageOptions = {
            changedFiles: changedFiles,
            collectCoverage: globalConfig.collectCoverage,
            collectCoverageFrom: globalConfig.collectCoverageFrom,
            coverageProvider: globalConfig.coverageProvider,
            sourcesRelatedToTestsInChangedFiles: sourcesRelatedToTestsInChangedFiles
          };
          coverageWorkerResult = null;

          if (!(0, _transform().shouldInstrument)(filename, coverageOptions, config)) {
            _context.next = 15;
            break;
          }

          if (!(coverageOptions.coverageProvider === 'v8')) {
            _context.next = 6;
            break;
          }

          stat = fs().statSync(filename);
          return _context.abrupt("return", {
            kind: 'V8Coverage',
            result: {
              functions: [{
                functionName: '(empty-report)',
                isBlockCoverage: true,
                ranges: [{
                  count: 0,
                  endOffset: stat.size,
                  startOffset: 0
                }]
              }],
              scriptId: '0',
              url: filename
            }
          });

        case 6:
          _context.next = 8;
          return regeneratorRuntime.awrap((0, _transform().createScriptTransformer)(config));

        case 8:
          scriptTransformer = _context.sent;
          _context.next = 11;
          return regeneratorRuntime.awrap(scriptTransformer.transformSourceAsync(filename, source, {
            instrument: true,
            supportsDynamicImport: true,
            supportsExportNamespaceFrom: true,
            supportsStaticESM: true,
            supportsTopLevelAwait: true
          }));

        case 11:
          _ref = _context.sent;
          code = _ref.code;
          // TODO: consider passing AST
          extracted = (0, _istanbulLibInstrument().readInitialCoverage)(code); // Check extracted initial coverage is not null, this can happen when using /* istanbul ignore file */

          if (extracted) {
            coverageWorkerResult = {
              coverage: (0, _istanbulLibCoverage().createFileCoverage)(extracted.coverageData),
              kind: 'BabelCoverage'
            };
          }

        case 15:
          return _context.abrupt("return", coverageWorkerResult);

        case 16:
        case "end":
          return _context.stop();
      }
    }
  });
}