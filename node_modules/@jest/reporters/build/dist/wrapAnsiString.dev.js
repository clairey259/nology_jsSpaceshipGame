'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = wrapAnsiString;
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// word-wrap a string that contains ANSI escape sequences.
// ANSI escape sequences do not add to the string length.

function wrapAnsiString(string, terminalWidth) {
  if (terminalWidth === 0) {
    // if the terminal width is zero, don't bother word-wrapping
    return string;
  }

  var ANSI_REGEXP = /[\x1B\x9B]\[[0-9]{1,2}m/g;
  var tokens = [];
  var lastIndex = 0;
  var match;

  while (match = ANSI_REGEXP.exec(string)) {
    var ansi = match[0];
    var index = match['index'];

    if (index != lastIndex) {
      tokens.push(['string', string.slice(lastIndex, index)]);
    }

    tokens.push(['ansi', ansi]);
    lastIndex = index + ansi.length;
  }

  if (lastIndex != string.length - 1) {
    tokens.push(['string', string.slice(lastIndex, string.length)]);
  }

  var lastLineLength = 0;
  return tokens.reduce(function (lines, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        kind = _ref2[0],
        token = _ref2[1];

    if (kind === 'string') {
      if (lastLineLength + token.length > terminalWidth) {
        while (token.length) {
          var chunk = token.slice(0, terminalWidth - lastLineLength);
          var remaining = token.slice(terminalWidth - lastLineLength, token.length);
          lines[lines.length - 1] += chunk;
          lastLineLength += chunk.length;
          token = remaining;

          if (token.length) {
            lines.push('');
            lastLineLength = 0;
          }
        }
      } else {
        lines[lines.length - 1] += token;
        lastLineLength += token.length;
      }
    } else {
      lines[lines.length - 1] += token;
    }

    return lines;
  }, ['']).join('\n');
}