'use strict';

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getPath = getPath;
exports.interpolateVariables = void 0;

function _jestGetType() {
  var data = require('jest-get-type');

  _jestGetType = function _jestGetType() {
    return data;
  };

  return data;
}

function _prettyFormat() {
  var data = require('pretty-format');

  _prettyFormat = function _prettyFormat() {
    return data;
  };

  return data;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var interpolateVariables = function interpolateVariables(title, template, index) {
  return Object.keys(template).reduce(getMatchingKeyPaths(title), []) // aka flatMap
  .reduce(replaceKeyPathWithValue(template), title).replace('$#', "".concat(index));
};

exports.interpolateVariables = interpolateVariables;

var getMatchingKeyPaths = function getMatchingKeyPaths(title) {
  return function (matches, key) {
    return matches.concat(title.match(new RegExp("\\$".concat(key, "[\\.\\w]*"), 'g')) || []);
  };
};

var replaceKeyPathWithValue = function replaceKeyPathWithValue(template) {
  return function (title, match) {
    var keyPath = match.replace('$', '').split('.');
    var value = getPath(template, keyPath);

    if ((0, _jestGetType().isPrimitive)(value)) {
      return title.replace(match, String(value));
    }

    return title.replace(match, (0, _prettyFormat().format)(value, {
      maxDepth: 1,
      min: true
    }));
  };
};
/* eslint import/export: 0*/


function getPath(template, _ref) {
  var _ref2 = _toArray(_ref),
      head = _ref2[0],
      tail = _ref2.slice(1);

  if (!head || !Object.prototype.hasOwnProperty.call(template, head)) return template;
  return getPath(template[head], tail);
}