"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.completion = completion;
exports.Completion = void 0;

var _command = require("./command.js");

var _commonTypes = require("./typings/common-types.js");

var templates = _interopRequireWildcard(require("./completion-templates.js"));

var _isPromise = require("./utils/is-promise.js");

var _parseCommand = require("./parse-command.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Completion =
/*#__PURE__*/
function () {
  function Completion(yargs, usage, command, shim) {
    _classCallCheck(this, Completion);

    var _a, _b, _c;

    this.yargs = yargs;
    this.usage = usage;
    this.command = command;
    this.shim = shim;
    this.completionKey = 'get-yargs-completions';
    this.aliases = null;
    this.customCompletionFunction = null;
    this.indexAfterLastReset = 0;
    this.zshShell = (_c = ((_a = this.shim.getEnv('SHELL')) === null || _a === void 0 ? void 0 : _a.includes('zsh')) || ((_b = this.shim.getEnv('ZSH_NAME')) === null || _b === void 0 ? void 0 : _b.includes('zsh'))) !== null && _c !== void 0 ? _c : false;
  }

  _createClass(Completion, [{
    key: "defaultCompletion",
    value: function defaultCompletion(args, argv, current, done) {
      var handlers = this.command.getCommandHandlers();

      for (var i = 0, ii = args.length; i < ii; ++i) {
        if (handlers[args[i]] && handlers[args[i]].builder) {
          var builder = handlers[args[i]].builder;

          if ((0, _command.isCommandBuilderCallback)(builder)) {
            this.indexAfterLastReset = i + 1;
            var y = this.yargs.getInternalMethods().reset();
            builder(y, true);
            return y.argv;
          }
        }
      }

      var completions = [];
      this.commandCompletions(completions, args, current);
      this.optionCompletions(completions, args, argv, current);
      this.choicesFromOptionsCompletions(completions, args, argv, current);
      this.choicesFromPositionalsCompletions(completions, args, argv, current);
      done(null, completions);
    }
  }, {
    key: "commandCompletions",
    value: function commandCompletions(completions, args, current) {
      var _this = this;

      var parentCommands = this.yargs.getInternalMethods().getContext().commands;

      if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current && !this.previousArgHasChoices(args)) {
        this.usage.getCommands().forEach(function (usageCommand) {
          var commandName = (0, _parseCommand.parseCommand)(usageCommand[0]).cmd;

          if (args.indexOf(commandName) === -1) {
            if (!_this.zshShell) {
              completions.push(commandName);
            } else {
              var desc = usageCommand[1] || '';
              completions.push(commandName.replace(/:/g, '\\:') + ':' + desc);
            }
          }
        });
      }
    }
  }, {
    key: "optionCompletions",
    value: function optionCompletions(completions, args, argv, current) {
      var _this2 = this;

      if ((current.match(/^-/) || current === '' && completions.length === 0) && !this.previousArgHasChoices(args)) {
        var options = this.yargs.getOptions();
        var positionalKeys = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [];
        Object.keys(options.key).forEach(function (key) {
          var negable = !!options.configuration['boolean-negation'] && options["boolean"].includes(key);
          var isPositionalKey = positionalKeys.includes(key);

          if (!isPositionalKey && !options.hiddenOptions.includes(key) && !_this2.argsContainKey(args, key, negable)) {
            _this2.completeOptionKey(key, completions, current);

            if (negable && !!options["default"][key]) _this2.completeOptionKey("no-".concat(key), completions, current);
          }
        });
      }
    }
  }, {
    key: "choicesFromOptionsCompletions",
    value: function choicesFromOptionsCompletions(completions, args, argv, current) {
      if (this.previousArgHasChoices(args)) {
        var choices = this.getPreviousArgChoices(args);

        if (choices && choices.length > 0) {
          completions.push.apply(completions, _toConsumableArray(choices.map(function (c) {
            return c.replace(/:/g, '\\:');
          })));
        }
      }
    }
  }, {
    key: "choicesFromPositionalsCompletions",
    value: function choicesFromPositionalsCompletions(completions, args, argv, current) {
      if (current === '' && completions.length > 0 && this.previousArgHasChoices(args)) {
        return;
      }

      var positionalKeys = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [];
      var offset = Math.max(this.indexAfterLastReset, this.yargs.getInternalMethods().getContext().commands.length + 1);
      var positionalKey = positionalKeys[argv._.length - offset - 1];

      if (!positionalKey) {
        return;
      }

      var choices = this.yargs.getOptions().choices[positionalKey] || [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = choices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var choice = _step.value;

          if (choice.startsWith(current)) {
            completions.push(choice.replace(/:/g, '\\:'));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "getPreviousArgChoices",
    value: function getPreviousArgChoices(args) {
      if (args.length < 1) return;
      var previousArg = args[args.length - 1];
      var filter = '';

      if (!previousArg.startsWith('-') && args.length > 1) {
        filter = previousArg;
        previousArg = args[args.length - 2];
      }

      if (!previousArg.startsWith('-')) return;
      var previousArgKey = previousArg.replace(/^-+/, '');
      var options = this.yargs.getOptions();
      var possibleAliases = [previousArgKey].concat(_toConsumableArray(this.yargs.getAliases()[previousArgKey] || []));
      var choices;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = possibleAliases[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var possibleAlias = _step2.value;

          if (Object.prototype.hasOwnProperty.call(options.key, possibleAlias) && Array.isArray(options.choices[possibleAlias])) {
            choices = options.choices[possibleAlias];
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (choices) {
        return choices.filter(function (choice) {
          return !filter || choice.startsWith(filter);
        });
      }
    }
  }, {
    key: "previousArgHasChoices",
    value: function previousArgHasChoices(args) {
      var choices = this.getPreviousArgChoices(args);
      return choices !== undefined && choices.length > 0;
    }
  }, {
    key: "argsContainKey",
    value: function argsContainKey(args, key, negable) {
      var argsContains = function argsContains(s) {
        return args.indexOf((/^[^0-9]$/.test(s) ? '-' : '--') + s) !== -1;
      };

      if (argsContains(key)) return true;
      if (negable && argsContains("no-".concat(key))) return true;

      if (this.aliases) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.aliases[key][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var alias = _step3.value;
            if (argsContains(alias)) return true;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      return false;
    }
  }, {
    key: "completeOptionKey",
    value: function completeOptionKey(key, completions, current) {
      var descs = this.usage.getDescriptions();

      var startsByTwoDashes = function startsByTwoDashes(s) {
        return /^--/.test(s);
      };

      var isShortOption = function isShortOption(s) {
        return /^[^0-9]$/.test(s);
      };

      var dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';

      if (!this.zshShell) {
        completions.push(dashes + key);
      } else {
        var desc = descs[key] || '';
        completions.push(dashes + "".concat(key.replace(/:/g, '\\:'), ":").concat(desc.replace('__yargsString__:', '')));
      }
    }
  }, {
    key: "customCompletion",
    value: function customCompletion(args, argv, current, done) {
      var _this3 = this;

      (0, _commonTypes.assertNotStrictEqual)(this.customCompletionFunction, null, this.shim);

      if (isSyncCompletionFunction(this.customCompletionFunction)) {
        var result = this.customCompletionFunction(current, argv);

        if ((0, _isPromise.isPromise)(result)) {
          return result.then(function (list) {
            _this3.shim.process.nextTick(function () {
              done(null, list);
            });
          })["catch"](function (err) {
            _this3.shim.process.nextTick(function () {
              done(err, undefined);
            });
          });
        }

        return done(null, result);
      } else if (isFallbackCompletionFunction(this.customCompletionFunction)) {
        return this.customCompletionFunction(current, argv, function () {
          var onCompleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : done;
          return _this3.defaultCompletion(args, argv, current, onCompleted);
        }, function (completions) {
          done(null, completions);
        });
      } else {
        return this.customCompletionFunction(current, argv, function (completions) {
          done(null, completions);
        });
      }
    }
  }, {
    key: "getCompletion",
    value: function getCompletion(args, done) {
      var _this4 = this;

      var current = args.length ? args[args.length - 1] : '';
      var argv = this.yargs.parse(args, true);
      var completionFunction = this.customCompletionFunction ? function (argv) {
        return _this4.customCompletion(args, argv, current, done);
      } : function (argv) {
        return _this4.defaultCompletion(args, argv, current, done);
      };
      return (0, _isPromise.isPromise)(argv) ? argv.then(completionFunction) : completionFunction(argv);
    }
  }, {
    key: "generateCompletionScript",
    value: function generateCompletionScript($0, cmd) {
      var script = this.zshShell ? templates.completionZshTemplate : templates.completionShTemplate;
      var name = this.shim.path.basename($0);
      if ($0.match(/\.js$/)) $0 = "./".concat($0);
      script = script.replace(/{{app_name}}/g, name);
      script = script.replace(/{{completion_command}}/g, cmd);
      return script.replace(/{{app_path}}/g, $0);
    }
  }, {
    key: "registerFunction",
    value: function registerFunction(fn) {
      this.customCompletionFunction = fn;
    }
  }, {
    key: "setParsed",
    value: function setParsed(parsed) {
      this.aliases = parsed.aliases;
    }
  }]);

  return Completion;
}();

exports.Completion = Completion;

function completion(yargs, usage, command, shim) {
  return new Completion(yargs, usage, command, shim);
}

function isSyncCompletionFunction(completionFunction) {
  return completionFunction.length < 3;
}

function isFallbackCompletionFunction(completionFunction) {
  return completionFunction.length > 3;
}