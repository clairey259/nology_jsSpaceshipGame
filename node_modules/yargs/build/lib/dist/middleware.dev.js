"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commandMiddlewareFactory = commandMiddlewareFactory;
exports.applyMiddleware = applyMiddleware;
exports.GlobalMiddleware = void 0;

var _argsert = require("./argsert.js");

var _isPromise = require("./utils/is-promise.js");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GlobalMiddleware =
/*#__PURE__*/
function () {
  function GlobalMiddleware(yargs) {
    _classCallCheck(this, GlobalMiddleware);

    this.globalMiddleware = [];
    this.frozens = [];
    this.yargs = yargs;
  }

  _createClass(GlobalMiddleware, [{
    key: "addMiddleware",
    value: function addMiddleware(callback, applyBeforeValidation) {
      var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var mutates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      (0, _argsert.argsert)('<array|function> [boolean] [boolean] [boolean]', [callback, applyBeforeValidation, global], arguments.length);

      if (Array.isArray(callback)) {
        for (var i = 0; i < callback.length; i++) {
          if (typeof callback[i] !== 'function') {
            throw Error('middleware must be a function');
          }

          var m = callback[i];
          m.applyBeforeValidation = applyBeforeValidation;
          m.global = global;
        }

        Array.prototype.push.apply(this.globalMiddleware, callback);
      } else if (typeof callback === 'function') {
        var _m = callback;
        _m.applyBeforeValidation = applyBeforeValidation;
        _m.global = global;
        _m.mutates = mutates;
        this.globalMiddleware.push(callback);
      }

      return this.yargs;
    }
  }, {
    key: "addCoerceMiddleware",
    value: function addCoerceMiddleware(callback, option) {
      var aliases = this.yargs.getAliases();
      this.globalMiddleware = this.globalMiddleware.filter(function (m) {
        var toCheck = [].concat(_toConsumableArray(aliases[option] || []), [option]);
        if (!m.option) return true;else return !toCheck.includes(m.option);
      });
      callback.option = option;
      return this.addMiddleware(callback, true, true, true);
    }
  }, {
    key: "getMiddleware",
    value: function getMiddleware() {
      return this.globalMiddleware;
    }
  }, {
    key: "freeze",
    value: function freeze() {
      this.frozens.push(_toConsumableArray(this.globalMiddleware));
    }
  }, {
    key: "unfreeze",
    value: function unfreeze() {
      var frozen = this.frozens.pop();
      if (frozen !== undefined) this.globalMiddleware = frozen;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.globalMiddleware = this.globalMiddleware.filter(function (m) {
        return m.global;
      });
    }
  }]);

  return GlobalMiddleware;
}();

exports.GlobalMiddleware = GlobalMiddleware;

function commandMiddlewareFactory(commandMiddleware) {
  if (!commandMiddleware) return [];
  return commandMiddleware.map(function (middleware) {
    middleware.applyBeforeValidation = false;
    return middleware;
  });
}

function applyMiddleware(argv, yargs, middlewares, beforeValidation) {
  return middlewares.reduce(function (acc, middleware) {
    if (middleware.applyBeforeValidation !== beforeValidation) {
      return acc;
    }

    if (middleware.mutates) {
      if (middleware.applied) return acc;
      middleware.applied = true;
    }

    if ((0, _isPromise.isPromise)(acc)) {
      return acc.then(function (initialObj) {
        return Promise.all([initialObj, middleware(initialObj, yargs)]);
      }).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            initialObj = _ref2[0],
            middlewareObj = _ref2[1];

        return Object.assign(initialObj, middlewareObj);
      });
    } else {
      var result = middleware(acc, yargs);
      return (0, _isPromise.isPromise)(result) ? result.then(function (middlewareObj) {
        return Object.assign(acc, middlewareObj);
      }) : Object.assign(acc, result);
    }
  }, argv);
}