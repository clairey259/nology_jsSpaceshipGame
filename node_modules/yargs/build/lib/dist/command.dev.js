"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.command = command;
exports.isCommandBuilderDefinition = isCommandBuilderDefinition;
exports.isCommandBuilderCallback = isCommandBuilderCallback;
exports.isCommandHandlerDefinition = isCommandHandlerDefinition;
exports.CommandInstance = void 0;

var _commonTypes = require("./typings/common-types.js");

var _isPromise = require("./utils/is-promise.js");

var _middleware = require("./middleware.js");

var _parseCommand = require("./parse-command.js");

var _yargsFactory = require("./yargs-factory.js");

var _maybeAsyncResult = require("./utils/maybe-async-result.js");

var _whichModule = _interopRequireDefault(require("./utils/which-module.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DEFAULT_MARKER = /(^\*)|(^\$0)/;

var CommandInstance =
/*#__PURE__*/
function () {
  function CommandInstance(usage, validation, globalMiddleware, shim) {
    _classCallCheck(this, CommandInstance);

    this.requireCache = new Set();
    this.handlers = {};
    this.aliasMap = {};
    this.frozens = [];
    this.shim = shim;
    this.usage = usage;
    this.globalMiddleware = globalMiddleware;
    this.validation = validation;
  }

  _createClass(CommandInstance, [{
    key: "addDirectory",
    value: function addDirectory(dir, req, callerFile, opts) {
      var _this = this;

      opts = opts || {};
      if (typeof opts.recurse !== 'boolean') opts.recurse = false;
      if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];
      var parentVisit = typeof opts.visit === 'function' ? opts.visit : function (o) {
        return o;
      };

      opts.visit = function (obj, joined, filename) {
        var visited = parentVisit(obj, joined, filename);

        if (visited) {
          if (_this.requireCache.has(joined)) return visited;else _this.requireCache.add(joined);

          _this.addHandler(visited);
        }

        return visited;
      };

      this.shim.requireDirectory({
        require: req,
        filename: callerFile
      }, dir, opts);
    }
  }, {
    key: "addHandler",
    value: function addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {
      var _this2 = this;

      var aliases = [];
      var middlewares = (0, _middleware.commandMiddlewareFactory)(commandMiddleware);

      handler = handler || function () {};

      if (Array.isArray(cmd)) {
        if (isCommandAndAliases(cmd)) {
          var _cmd = cmd;

          var _cmd2 = _toArray(_cmd);

          cmd = _cmd2[0];
          aliases = _cmd2.slice(1);
        } else {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = cmd[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _command = _step.value;
              this.addHandler(_command);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      } else if (isCommandHandlerDefinition(cmd)) {
        var _command2 = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : this.moduleName(cmd);

        if (cmd.aliases) _command2 = [].concat(_command2).concat(cmd.aliases);
        this.addHandler(_command2, this.extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);
        return;
      } else if (isCommandBuilderDefinition(builder)) {
        this.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);
        return;
      }

      if (typeof cmd === 'string') {
        var parsedCommand = (0, _parseCommand.parseCommand)(cmd);
        aliases = aliases.map(function (alias) {
          return (0, _parseCommand.parseCommand)(alias).cmd;
        });
        var isDefault = false;
        var parsedAliases = [parsedCommand.cmd].concat(aliases).filter(function (c) {
          if (DEFAULT_MARKER.test(c)) {
            isDefault = true;
            return false;
          }

          return true;
        });
        if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0');

        if (isDefault) {
          parsedCommand.cmd = parsedAliases[0];
          aliases = parsedAliases.slice(1);
          cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);
        }

        aliases.forEach(function (alias) {
          _this2.aliasMap[alias] = parsedCommand.cmd;
        });

        if (description !== false) {
          this.usage.command(cmd, description, isDefault, aliases, deprecated);
        }

        this.handlers[parsedCommand.cmd] = {
          original: cmd,
          description: description,
          handler: handler,
          builder: builder || {},
          middlewares: middlewares,
          deprecated: deprecated,
          demanded: parsedCommand.demanded,
          optional: parsedCommand.optional
        };
        if (isDefault) this.defaultCommand = this.handlers[parsedCommand.cmd];
      }
    }
  }, {
    key: "getCommandHandlers",
    value: function getCommandHandlers() {
      return this.handlers;
    }
  }, {
    key: "getCommands",
    value: function getCommands() {
      return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));
    }
  }, {
    key: "hasDefaultCommand",
    value: function hasDefaultCommand() {
      return !!this.defaultCommand;
    }
  }, {
    key: "runCommand",
    value: function runCommand(command, yargs, parsed, commandIndex, helpOnly, helpOrVersionSet) {
      var _this3 = this;

      var commandHandler = this.handlers[command] || this.handlers[this.aliasMap[command]] || this.defaultCommand;
      var currentContext = yargs.getInternalMethods().getContext();
      var parentCommands = currentContext.commands.slice();
      var isDefaultCommand = !command;

      if (command) {
        currentContext.commands.push(command);
        currentContext.fullCommands.push(commandHandler.original);
      }

      var builderResult = this.applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, parsed.aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet);
      return (0, _isPromise.isPromise)(builderResult) ? builderResult.then(function (result) {
        return _this3.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, result.innerArgv, currentContext, helpOnly, result.aliases, yargs);
      }) : this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, builderResult.innerArgv, currentContext, helpOnly, builderResult.aliases, yargs);
    }
  }, {
    key: "applyBuilderUpdateUsageAndParse",
    value: function applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet) {
      var _this4 = this;

      var builder = commandHandler.builder;
      var innerYargs = yargs;

      if (isCommandBuilderCallback(builder)) {
        var builderOutput = builder(yargs.getInternalMethods().reset(aliases), helpOrVersionSet);

        if ((0, _isPromise.isPromise)(builderOutput)) {
          return builderOutput.then(function (output) {
            innerYargs = (0, _yargsFactory.isYargsInstance)(output) ? output : yargs;
            return _this4.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);
          });
        }
      } else if (isCommandBuilderOptionDefinitions(builder)) {
        innerYargs = yargs.getInternalMethods().reset(aliases);
        Object.keys(commandHandler.builder).forEach(function (key) {
          innerYargs.option(key, builder[key]);
        });
      }

      return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);
    }
  }, {
    key: "parseAndUpdateUsage",
    value: function parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly) {
      if (isDefaultCommand) innerYargs.getInternalMethods().getUsageInstance().unfreeze(true);

      if (this.shouldUpdateUsage(innerYargs)) {
        innerYargs.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);
      }

      var innerArgv = innerYargs.getInternalMethods().runYargsParserAndExecuteCommands(null, undefined, true, commandIndex, helpOnly);
      return (0, _isPromise.isPromise)(innerArgv) ? innerArgv.then(function (argv) {
        return {
          aliases: innerYargs.parsed.aliases,
          innerArgv: argv
        };
      }) : {
        aliases: innerYargs.parsed.aliases,
        innerArgv: innerArgv
      };
    }
  }, {
    key: "shouldUpdateUsage",
    value: function shouldUpdateUsage(yargs) {
      return !yargs.getInternalMethods().getUsageInstance().getUsageDisabled() && yargs.getInternalMethods().getUsageInstance().getUsage().length === 0;
    }
  }, {
    key: "usageFromParentCommandsCommandHandler",
    value: function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {
      var c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original;
      var pc = parentCommands.filter(function (c) {
        return !DEFAULT_MARKER.test(c);
      });
      pc.push(c);
      return "$0 ".concat(pc.join(' '));
    }
  }, {
    key: "handleValidationAndGetResult",
    value: function handleValidationAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, aliases, yargs, middlewares, positionalMap) {
      if (!yargs.getInternalMethods().getHasOutput()) {
        var validation = yargs.getInternalMethods().runValidation(aliases, positionalMap, yargs.parsed.error, isDefaultCommand);
        innerArgv = (0, _maybeAsyncResult.maybeAsyncResult)(innerArgv, function (result) {
          validation(result);
          return result;
        });
      }

      if (commandHandler.handler && !yargs.getInternalMethods().getHasOutput()) {
        yargs.getInternalMethods().setHasOutput();
        var populateDoubleDash = !!yargs.getOptions().configuration['populate--'];
        yargs.getInternalMethods().postProcess(innerArgv, populateDoubleDash, false, false);
        innerArgv = (0, _middleware.applyMiddleware)(innerArgv, yargs, middlewares, false);
        innerArgv = (0, _maybeAsyncResult.maybeAsyncResult)(innerArgv, function (result) {
          var handlerResult = commandHandler.handler(result);
          return (0, _isPromise.isPromise)(handlerResult) ? handlerResult.then(function () {
            return result;
          }) : result;
        });

        if (!isDefaultCommand) {
          yargs.getInternalMethods().getUsageInstance().cacheHelpMessage();
        }

        if ((0, _isPromise.isPromise)(innerArgv) && !yargs.getInternalMethods().hasParseCallback()) {
          innerArgv["catch"](function (error) {
            try {
              yargs.getInternalMethods().getUsageInstance().fail(null, error);
            } catch (_err) {}
          });
        }
      }

      if (!isDefaultCommand) {
        currentContext.commands.pop();
        currentContext.fullCommands.pop();
      }

      return innerArgv;
    }
  }, {
    key: "applyMiddlewareAndGetResult",
    value: function applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, helpOnly, aliases, yargs) {
      var _this5 = this;

      var positionalMap = {};
      if (helpOnly) return innerArgv;

      if (!yargs.getInternalMethods().getHasOutput()) {
        positionalMap = this.populatePositionals(commandHandler, innerArgv, currentContext, yargs);
      }

      var middlewares = this.globalMiddleware.getMiddleware().slice(0).concat(commandHandler.middlewares);
      var maybePromiseArgv = (0, _middleware.applyMiddleware)(innerArgv, yargs, middlewares, true);
      return (0, _isPromise.isPromise)(maybePromiseArgv) ? maybePromiseArgv.then(function (resolvedInnerArgv) {
        return _this5.handleValidationAndGetResult(isDefaultCommand, commandHandler, resolvedInnerArgv, currentContext, aliases, yargs, middlewares, positionalMap);
      }) : this.handleValidationAndGetResult(isDefaultCommand, commandHandler, maybePromiseArgv, currentContext, aliases, yargs, middlewares, positionalMap);
    }
  }, {
    key: "populatePositionals",
    value: function populatePositionals(commandHandler, argv, context, yargs) {
      argv._ = argv._.slice(context.commands.length);
      var demanded = commandHandler.demanded.slice(0);
      var optional = commandHandler.optional.slice(0);
      var positionalMap = {};
      this.validation.positionalCount(demanded.length, argv._.length);

      while (demanded.length) {
        var demand = demanded.shift();
        this.populatePositional(demand, argv, positionalMap);
      }

      while (optional.length) {
        var maybe = optional.shift();
        this.populatePositional(maybe, argv, positionalMap);
      }

      argv._ = context.commands.concat(argv._.map(function (a) {
        return '' + a;
      }));
      this.postProcessPositionals(argv, positionalMap, this.cmdToParseOptions(commandHandler.original), yargs);
      return positionalMap;
    }
  }, {
    key: "populatePositional",
    value: function populatePositional(positional, argv, positionalMap) {
      var cmd = positional.cmd[0];

      if (positional.variadic) {
        positionalMap[cmd] = argv._.splice(0).map(String);
      } else {
        if (argv._.length) positionalMap[cmd] = [String(argv._.shift())];
      }
    }
  }, {
    key: "cmdToParseOptions",
    value: function cmdToParseOptions(cmdString) {
      var parseOptions = {
        array: [],
        "default": {},
        alias: {},
        demand: {}
      };
      var parsed = (0, _parseCommand.parseCommand)(cmdString);
      parsed.demanded.forEach(function (d) {
        var _d$cmd = _toArray(d.cmd),
            cmd = _d$cmd[0],
            aliases = _d$cmd.slice(1);

        if (d.variadic) {
          parseOptions.array.push(cmd);
          parseOptions["default"][cmd] = [];
        }

        parseOptions.alias[cmd] = aliases;
        parseOptions.demand[cmd] = true;
      });
      parsed.optional.forEach(function (o) {
        var _o$cmd = _toArray(o.cmd),
            cmd = _o$cmd[0],
            aliases = _o$cmd.slice(1);

        if (o.variadic) {
          parseOptions.array.push(cmd);
          parseOptions["default"][cmd] = [];
        }

        parseOptions.alias[cmd] = aliases;
      });
      return parseOptions;
    }
  }, {
    key: "postProcessPositionals",
    value: function postProcessPositionals(argv, positionalMap, parseOptions, yargs) {
      var _this6 = this;

      var options = Object.assign({}, yargs.getOptions());
      options["default"] = Object.assign(parseOptions["default"], options["default"]);

      for (var _i = 0, _Object$keys = Object.keys(parseOptions.alias); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);
      }

      options.array = options.array.concat(parseOptions.array);
      options.config = {};
      var unparsed = [];
      Object.keys(positionalMap).forEach(function (key) {
        positionalMap[key].map(function (value) {
          if (options.configuration['unknown-options-as-args']) options.key[key] = true;
          unparsed.push("--".concat(key));
          unparsed.push(value);
        });
      });
      if (!unparsed.length) return;
      var config = Object.assign({}, options.configuration, {
        'populate--': false
      });
      var parsed = this.shim.Parser.detailed(unparsed, Object.assign({}, options, {
        configuration: config
      }));

      if (parsed.error) {
        yargs.getInternalMethods().getUsageInstance().fail(parsed.error.message, parsed.error);
      } else {
        var positionalKeys = Object.keys(positionalMap);
        Object.keys(positionalMap).forEach(function (key) {
          positionalKeys.push.apply(positionalKeys, _toConsumableArray(parsed.aliases[key]));
        });
        Object.keys(parsed.argv).forEach(function (key) {
          if (positionalKeys.includes(key)) {
            if (!positionalMap[key]) positionalMap[key] = parsed.argv[key];

            if (!_this6.isInConfigs(yargs, key) && !_this6.isDefaulted(yargs, key) && Object.prototype.hasOwnProperty.call(argv, key) && Object.prototype.hasOwnProperty.call(parsed.argv, key) && (Array.isArray(argv[key]) || Array.isArray(parsed.argv[key]))) {
              argv[key] = [].concat(argv[key], parsed.argv[key]);
            } else {
              argv[key] = parsed.argv[key];
            }
          }
        });
      }
    }
  }, {
    key: "isDefaulted",
    value: function isDefaulted(yargs, key) {
      var _yargs$getOptions = yargs.getOptions(),
          defaults = _yargs$getOptions["default"];

      return Object.prototype.hasOwnProperty.call(defaults, key) || Object.prototype.hasOwnProperty.call(defaults, this.shim.Parser.camelCase(key));
    }
  }, {
    key: "isInConfigs",
    value: function isInConfigs(yargs, key) {
      var _this7 = this;

      var _yargs$getOptions2 = yargs.getOptions(),
          configObjects = _yargs$getOptions2.configObjects;

      return configObjects.some(function (c) {
        return Object.prototype.hasOwnProperty.call(c, key);
      }) || configObjects.some(function (c) {
        return Object.prototype.hasOwnProperty.call(c, _this7.shim.Parser.camelCase(key));
      });
    }
  }, {
    key: "runDefaultBuilderOn",
    value: function runDefaultBuilderOn(yargs) {
      if (!this.defaultCommand) return;

      if (this.shouldUpdateUsage(yargs)) {
        var commandString = DEFAULT_MARKER.test(this.defaultCommand.original) ? this.defaultCommand.original : this.defaultCommand.original.replace(/^[^[\]<>]*/, '$0 ');
        yargs.getInternalMethods().getUsageInstance().usage(commandString, this.defaultCommand.description);
      }

      var builder = this.defaultCommand.builder;

      if (isCommandBuilderCallback(builder)) {
        return builder(yargs, true);
      } else if (!isCommandBuilderDefinition(builder)) {
        Object.keys(builder).forEach(function (key) {
          yargs.option(key, builder[key]);
        });
      }

      return undefined;
    }
  }, {
    key: "moduleName",
    value: function moduleName(obj) {
      var mod = (0, _whichModule["default"])(obj);
      if (!mod) throw new Error("No command name given for module: ".concat(this.shim.inspect(obj)));
      return this.commandFromFilename(mod.filename);
    }
  }, {
    key: "commandFromFilename",
    value: function commandFromFilename(filename) {
      return this.shim.path.basename(filename, this.shim.path.extname(filename));
    }
  }, {
    key: "extractDesc",
    value: function extractDesc(_ref) {
      var describe = _ref.describe,
          description = _ref.description,
          desc = _ref.desc;

      for (var _i2 = 0, _arr = [describe, description, desc]; _i2 < _arr.length; _i2++) {
        var test = _arr[_i2];
        if (typeof test === 'string' || test === false) return test;
        (0, _commonTypes.assertNotStrictEqual)(test, true, this.shim);
      }

      return false;
    }
  }, {
    key: "freeze",
    value: function freeze() {
      this.frozens.push({
        handlers: this.handlers,
        aliasMap: this.aliasMap,
        defaultCommand: this.defaultCommand
      });
    }
  }, {
    key: "unfreeze",
    value: function unfreeze() {
      var frozen = this.frozens.pop();
      (0, _commonTypes.assertNotStrictEqual)(frozen, undefined, this.shim);
      this.handlers = frozen.handlers;
      this.aliasMap = frozen.aliasMap;
      this.defaultCommand = frozen.defaultCommand;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.handlers = {};
      this.aliasMap = {};
      this.defaultCommand = undefined;
      this.requireCache = new Set();
      return this;
    }
  }]);

  return CommandInstance;
}();

exports.CommandInstance = CommandInstance;

function command(usage, validation, globalMiddleware, shim) {
  return new CommandInstance(usage, validation, globalMiddleware, shim);
}

function isCommandBuilderDefinition(builder) {
  return _typeof(builder) === 'object' && !!builder.builder && typeof builder.handler === 'function';
}

function isCommandAndAliases(cmd) {
  return cmd.every(function (c) {
    return typeof c === 'string';
  });
}

function isCommandBuilderCallback(builder) {
  return typeof builder === 'function';
}

function isCommandBuilderOptionDefinitions(builder) {
  return _typeof(builder) === 'object';
}

function isCommandHandlerDefinition(cmd) {
  return _typeof(cmd) === 'object' && !Array.isArray(cmd);
}