'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Converts a string representing an amount of memory to bytes.
 *
 * @param input The value to convert to bytes.
 * @param percentageReference The reference value to use when a '%' value is supplied.
 */

function stringToBytes(input, percentageReference) {
  if (input === null || input === undefined) {
    return input;
  }

  if (typeof input === 'string') {
    if (isNaN(Number.parseFloat(input.slice(-1)))) {
      // eslint-disable-next-line prefer-const
      var _ref = input.match(/(.*?)([^0-9.-]+)$/i) || [],
          _ref2 = _slicedToArray(_ref, 3),
          numericString = _ref2[1],
          trailingChars = _ref2[2];

      if (trailingChars && numericString) {
        var numericValue = Number.parseFloat(numericString);
        trailingChars = trailingChars.toLowerCase();

        switch (trailingChars) {
          case '%':
            input = numericValue / 100;
            break;

          case 'kb':
          case 'k':
            return numericValue * 1000;

          case 'kib':
            return numericValue * 1024;

          case 'mb':
          case 'm':
            return numericValue * 1000 * 1000;

          case 'mib':
            return numericValue * 1024 * 1024;

          case 'gb':
          case 'g':
            return numericValue * 1000 * 1000 * 1000;

          case 'gib':
            return numericValue * 1024 * 1024 * 1024;
        }
      } // It ends in some kind of char so we need to do some parsing

    } else {
      input = Number.parseFloat(input);
    }
  }

  if (typeof input === 'number') {
    if (input <= 1 && input > 0) {
      if (percentageReference) {
        return Math.floor(input * percentageReference);
      } else {
        throw new Error('For a percentage based memory limit a percentageReference must be supplied');
      }
    } else if (input > 1) {
      return Math.floor(input);
    } else {
      throw new Error('Unexpected numerical input');
    }
  }

  throw new Error('Unexpected input');
} // https://github.com/import-js/eslint-plugin-import/issues/1590


var _default = stringToBytes;
exports["default"] = _default;