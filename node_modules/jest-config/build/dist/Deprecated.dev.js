'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var deprecatedOptions = {
  browser: function browser() {
    return "  Option ".concat(_chalk()["default"].bold('"browser"'), " has been deprecated. Please install \"browser-resolve\" and use the \"resolver\" option in Jest configuration as shown in the documentation: https://jestjs.io/docs/configuration#resolver-string");
  },
  collectCoverageOnlyFrom: function collectCoverageOnlyFrom(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"collectCoverageOnlyFrom"'), " was replaced by ").concat(_chalk()["default"].bold('"collectCoverageFrom"'), ".\n\n    Please update your configuration.");
  },
  extraGlobals: function extraGlobals(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"extraGlobals"'), " was replaced by ").concat(_chalk()["default"].bold('"sandboxInjectedGlobals"'), ".\n\n  Please update your configuration.");
  },
  moduleLoader: function moduleLoader(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"moduleLoader"'), " was replaced by ").concat(_chalk()["default"].bold('"runtime"'), ".\n\n  Please update your configuration.");
  },
  preprocessorIgnorePatterns: function preprocessorIgnorePatterns(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"preprocessorIgnorePatterns"'), " was replaced by ").concat(_chalk()["default"].bold('"transformIgnorePatterns"'), ", which support multiple preprocessors.\n\n  Please update your configuration.");
  },
  scriptPreprocessor: function scriptPreprocessor(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"scriptPreprocessor"'), " was replaced by ").concat(_chalk()["default"].bold('"transform"'), ", which support multiple preprocessors.\n\n  Please update your configuration.");
  },
  setupTestFrameworkScriptFile: function setupTestFrameworkScriptFile(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"setupTestFrameworkScriptFile"'), " was replaced by configuration ").concat(_chalk()["default"].bold('"setupFilesAfterEnv"'), ", which supports multiple paths.\n\n  Please update your configuration.");
  },
  testPathDirs: function testPathDirs(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"testPathDirs"'), " was replaced by ").concat(_chalk()["default"].bold('"roots"'), ".\n\n  Please update your configuration.\n  ");
  },
  testURL: function testURL(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"testURL"'), " was replaced by passing the URL via ").concat(_chalk()["default"].bold('"testEnvironmentOptions.url"'), ".\n\n  Please update your configuration.");
  },
  timers: function timers(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"timers"'), " was replaced by ").concat(_chalk()["default"].bold('"fakeTimers"'), ".\n\n  Please update your configuration.");
  }
};
var _default = deprecatedOptions;
exports["default"] = _default;