'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var singleComment = Symbol('singleComment');
var multiComment = Symbol('multiComment');

var stripWithoutWhitespace = function stripWithoutWhitespace() {
  return '';
};

var stripWithWhitespace = function stripWithWhitespace(string, start, end) {
  return string.slice(start, end).replace(/\S/g, ' ');
};

var isEscaped = function isEscaped(jsonString, quotePosition) {
  var index = quotePosition - 1;
  var backslashCount = 0;

  while (jsonString[index] === '\\') {
    index -= 1;
    backslashCount += 1;
  }

  return Boolean(backslashCount % 2);
};

module.exports = function (jsonString) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof jsonString !== 'string') {
    throw new TypeError("Expected argument `jsonString` to be a `string`, got `".concat(_typeof(jsonString), "`"));
  }

  var strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;
  var insideString = false;
  var insideComment = false;
  var offset = 0;
  var result = '';

  for (var i = 0; i < jsonString.length; i++) {
    var currentCharacter = jsonString[i];
    var nextCharacter = jsonString[i + 1];

    if (!insideComment && currentCharacter === '"') {
      var escaped = isEscaped(jsonString, i);

      if (!escaped) {
        insideString = !insideString;
      }
    }

    if (insideString) {
      continue;
    }

    if (!insideComment && currentCharacter + nextCharacter === '//') {
      result += jsonString.slice(offset, i);
      offset = i;
      insideComment = singleComment;
      i++;
    } else if (insideComment === singleComment && currentCharacter + nextCharacter === '\r\n') {
      i++;
      insideComment = false;
      result += strip(jsonString, offset, i);
      offset = i;
      continue;
    } else if (insideComment === singleComment && currentCharacter === '\n') {
      insideComment = false;
      result += strip(jsonString, offset, i);
      offset = i;
    } else if (!insideComment && currentCharacter + nextCharacter === '/*') {
      result += jsonString.slice(offset, i);
      offset = i;
      insideComment = multiComment;
      i++;
      continue;
    } else if (insideComment === multiComment && currentCharacter + nextCharacter === '*/') {
      i++;
      insideComment = false;
      result += strip(jsonString, offset, i + 1);
      offset = i + 1;
      continue;
    }
  }

  return result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));
};