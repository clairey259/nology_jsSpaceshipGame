'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

var _jestUtil = require('jest-util');
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var FRAMEWORK_INITIALIZER = require.resolve('./jestAdapterInit');

var jestAdapter = function jestAdapter(globalConfig, config, environment, runtime, testPath, sendMessageToJest) {
  var _runtime$requireInter, initialize, runAndTransformResultsToJestFormat, _ref, globals, snapshotState, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, path, _esm, esm, results;

  return regeneratorRuntime.async(function jestAdapter$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _runtime$requireInter = runtime.requireInternalModule(FRAMEWORK_INITIALIZER), initialize = _runtime$requireInter.initialize, runAndTransformResultsToJestFormat = _runtime$requireInter.runAndTransformResultsToJestFormat;
          _context.next = 3;
          return regeneratorRuntime.awrap(initialize({
            config: config,
            environment: environment,
            globalConfig: globalConfig,
            localRequire: runtime.requireModule.bind(runtime),
            parentProcess: process,
            sendMessageToJest: sendMessageToJest,
            setGlobalsForRuntime: runtime.setGlobalsForRuntime.bind(runtime),
            testPath: testPath
          }));

        case 3:
          _ref = _context.sent;
          globals = _ref.globals;
          snapshotState = _ref.snapshotState;

          if (config.fakeTimers.enableGlobally) {
            if (config.fakeTimers.legacyFakeTimers) {
              // during setup, this cannot be null (and it's fine to explode if it is)
              environment.fakeTimers.useFakeTimers();
            } else {
              environment.fakeTimersModern.useFakeTimers();
            }
          }

          globals.beforeEach(function () {
            if (config.resetModules) {
              runtime.resetModules();
            }

            if (config.clearMocks) {
              runtime.clearAllMocks();
            }

            if (config.resetMocks) {
              runtime.resetAllMocks();

              if (config.fakeTimers.enableGlobally && config.fakeTimers.legacyFakeTimers) {
                // during setup, this cannot be null (and it's fine to explode if it is)
                environment.fakeTimers.useFakeTimers();
              }
            }

            if (config.restoreMocks) {
              runtime.restoreAllMocks();
            }
          });
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 11;
          _iterator = config.setupFilesAfterEnv[Symbol.iterator]();

        case 13:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 25;
            break;
          }

          path = _step.value;
          _esm = runtime.unstable_shouldLoadAsEsm(path);

          if (!_esm) {
            _context.next = 21;
            break;
          }

          _context.next = 19;
          return regeneratorRuntime.awrap(runtime.unstable_importModule(path));

        case 19:
          _context.next = 22;
          break;

        case 21:
          runtime.requireModule(path);

        case 22:
          _iteratorNormalCompletion = true;
          _context.next = 13;
          break;

        case 25:
          _context.next = 31;
          break;

        case 27:
          _context.prev = 27;
          _context.t0 = _context["catch"](11);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 31:
          _context.prev = 31;
          _context.prev = 32;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 34:
          _context.prev = 34;

          if (!_didIteratorError) {
            _context.next = 37;
            break;
          }

          throw _iteratorError;

        case 37:
          return _context.finish(34);

        case 38:
          return _context.finish(31);

        case 39:
          esm = runtime.unstable_shouldLoadAsEsm(testPath);

          if (!esm) {
            _context.next = 45;
            break;
          }

          _context.next = 43;
          return regeneratorRuntime.awrap(runtime.unstable_importModule(testPath));

        case 43:
          _context.next = 46;
          break;

        case 45:
          runtime.requireModule(testPath);

        case 46:
          _context.next = 48;
          return regeneratorRuntime.awrap(runAndTransformResultsToJestFormat({
            config: config,
            globalConfig: globalConfig,
            testPath: testPath
          }));

        case 48:
          results = _context.sent;

          _addSnapshotData(results, snapshotState); // We need to copy the results object to ensure we don't leaks the prototypes
          // from the VM. Jasmine creates the result objects in the parent process, we
          // should consider doing that for circus as well.


          return _context.abrupt("return", (0, _jestUtil.deepCyclicCopy)(results, {
            keepPrototype: false
          }));

        case 51:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[11, 27, 31, 39], [32,, 34, 38]]);
};

var _addSnapshotData = function _addSnapshotData(results, snapshotState) {
  results.testResults.forEach(function (_ref2) {
    var fullName = _ref2.fullName,
        status = _ref2.status;

    if (status === 'pending' || status === 'failed') {
      // if test is skipped or failed, we don't want to mark
      // its snapshots as obsolete.
      snapshotState.markSnapshotsAsCheckedForTest(fullName);
    }
  });
  var uncheckedCount = snapshotState.getUncheckedCount();
  var uncheckedKeys = snapshotState.getUncheckedKeys();

  if (uncheckedCount) {
    snapshotState.removeUncheckedKeys();
  }

  var status = snapshotState.save();
  results.snapshot.fileDeleted = status.deleted;
  results.snapshot.added = snapshotState.added;
  results.snapshot.matched = snapshotState.matched;
  results.snapshot.unmatched = snapshotState.unmatched;
  results.snapshot.updated = snapshotState.updated;
  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0; // Copy the array to prevent memory leaks

  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);
};

var _default = jestAdapter;
exports["default"] = _default;