"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Node = /// value;
/// next;
function Node(value) {
  _classCallCheck(this, Node);

  this.value = value; // TODO: Remove this when targeting Node.js 12.

  this.next = undefined;
};

var Queue =
/*#__PURE__*/
function () {
  // TODO: Use private class fields when targeting Node.js 12.
  // #_head;
  // #_tail;
  // #_size;
  function Queue() {
    _classCallCheck(this, Queue);

    this.clear();
  }

  _createClass(Queue, [{
    key: "enqueue",
    value: function enqueue(value) {
      var node = new Node(value);

      if (this._head) {
        this._tail.next = node;
        this._tail = node;
      } else {
        this._head = node;
        this._tail = node;
      }

      this._size++;
    }
  }, {
    key: "dequeue",
    value: function dequeue() {
      var current = this._head;

      if (!current) {
        return;
      }

      this._head = this._head.next;
      this._size--;
      return current.value;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._head = undefined;
      this._tail = undefined;
      this._size = 0;
    }
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var current;
      return regeneratorRuntime.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              current = this._head;

            case 1:
              if (!current) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return current.value;

            case 4:
              current = current.next;
              _context.next = 1;
              break;

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, value, this);
    })
  }, {
    key: "size",
    get: function get() {
      return this._size;
    }
  }]);

  return Queue;
}();

module.exports = Queue;