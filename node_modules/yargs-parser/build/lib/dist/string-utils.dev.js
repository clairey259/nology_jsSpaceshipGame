"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camelCase = camelCase;
exports.decamelize = decamelize;
exports.looksLikeNumber = looksLikeNumber;

/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
function camelCase(str) {
  // Handle the case where an argument is provided as camel case, e.g., fooBar.
  // by ensuring that the string isn't already mixed case:
  var isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();

  if (!isCamelCase) {
    str = str.toLowerCase();
  }

  if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {
    return str;
  } else {
    var camelcase = '';
    var nextChrUpper = false;
    var leadingHyphens = str.match(/^-+/);

    for (var i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {
      var chr = str.charAt(i);

      if (nextChrUpper) {
        nextChrUpper = false;
        chr = chr.toUpperCase();
      }

      if (i !== 0 && (chr === '-' || chr === '_')) {
        nextChrUpper = true;
      } else if (chr !== '-' && chr !== '_') {
        camelcase += chr;
      }
    }

    return camelcase;
  }
}

function decamelize(str, joinString) {
  var lowercase = str.toLowerCase();
  joinString = joinString || '-';
  var notCamelcase = '';

  for (var i = 0; i < str.length; i++) {
    var chrLower = lowercase.charAt(i);
    var chrString = str.charAt(i);

    if (chrLower !== chrString && i > 0) {
      notCamelcase += "".concat(joinString).concat(lowercase.charAt(i));
    } else {
      notCamelcase += chrString;
    }
  }

  return notCamelcase;
}

function looksLikeNumber(x) {
  if (x === null || x === undefined) return false; // if loaded from config, may already be a number.

  if (typeof x === 'number') return true; // hexadecimal.

  if (/^0x[0-9a-f]+$/i.test(x)) return true; // don't treat 0123 as a number; as it drops the leading '0'.

  if (/^0[^.]/.test(x)) return false;
  return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
}