'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.resolveWatchPlugin = exports.resolveTestEnvironment = exports.resolveSequencer = exports.resolveRunner = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestValidate() {
  var data = require('jest-validate');

  _jestValidate = function _jestValidate() {
    return data;
  };

  return data;
}

var _resolver = _interopRequireDefault(require('./resolver'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var BULLET = _chalk()["default"].bold("\u25CF ");

var DOCUMENTATION_NOTE = "  ".concat(_chalk()["default"].bold('Configuration Documentation:'), "\n  https://jestjs.io/docs/configuration\n");

var createValidationError = function createValidationError(message) {
  return new (_jestValidate().ValidationError)("".concat(BULLET, "Validation Error"), message, DOCUMENTATION_NOTE);
};

var replaceRootDirInPath = function replaceRootDirInPath(rootDir, filePath) {
  if (!/^<rootDir>/.test(filePath)) {
    return filePath;
  }

  return path().resolve(rootDir, path().normalize("./".concat(filePath.substr('<rootDir>'.length))));
};

var resolveWithPrefix = function resolveWithPrefix(resolver, _ref) {
  var filePath = _ref.filePath,
      humanOptionName = _ref.humanOptionName,
      optionName = _ref.optionName,
      prefix = _ref.prefix,
      requireResolveFunction = _ref.requireResolveFunction,
      rootDir = _ref.rootDir;
  var fileName = replaceRootDirInPath(rootDir, filePath);

  var module = _resolver["default"].findNodeModule("".concat(prefix).concat(fileName), {
    basedir: rootDir,
    resolver: resolver || undefined
  });

  if (module) {
    return module;
  }

  try {
    return requireResolveFunction("".concat(prefix).concat(fileName));
  } catch (_unused) {}

  module = _resolver["default"].findNodeModule(fileName, {
    basedir: rootDir,
    resolver: resolver || undefined
  });

  if (module) {
    return module;
  }

  try {
    return requireResolveFunction(fileName);
  } catch (_unused2) {}

  throw createValidationError("  ".concat(humanOptionName, " ").concat(_chalk()["default"].bold(fileName), " cannot be found. Make sure the ").concat(_chalk()["default"].bold(optionName), " configuration option points to an existing node module."));
};
/**
 * Finds the test environment to use:
 *
 * 1. looks for jest-environment-<name> relative to project.
 * 1. looks for jest-environment-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */


var resolveTestEnvironment = function resolveTestEnvironment(_ref2) {
  var rootDir = _ref2.rootDir,
      filePath = _ref2.testEnvironment,
      requireResolveFunction = _ref2.requireResolveFunction;

  // we don't want to resolve the actual `jsdom` module if `jest-environment-jsdom` is not installed, but `jsdom` package is
  if (filePath === 'jsdom') {
    filePath = 'jest-environment-jsdom';
  }

  try {
    return resolveWithPrefix(undefined, {
      filePath: filePath,
      humanOptionName: 'Test environment',
      optionName: 'testEnvironment',
      prefix: 'jest-environment-',
      requireResolveFunction: requireResolveFunction,
      rootDir: rootDir
    });
  } catch (error) {
    if (filePath === 'jest-environment-jsdom') {
      error.message += '\n\nAs of Jest 28 "jest-environment-jsdom" is no longer shipped by default, make sure to install it separately.';
    }

    throw error;
  }
};
/**
 * Finds the watch plugins to use:
 *
 * 1. looks for jest-watch-<name> relative to project.
 * 1. looks for jest-watch-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */


exports.resolveTestEnvironment = resolveTestEnvironment;

var resolveWatchPlugin = function resolveWatchPlugin(resolver, _ref3) {
  var filePath = _ref3.filePath,
      rootDir = _ref3.rootDir,
      requireResolveFunction = _ref3.requireResolveFunction;
  return resolveWithPrefix(resolver, {
    filePath: filePath,
    humanOptionName: 'Watch plugin',
    optionName: 'watchPlugins',
    prefix: 'jest-watch-',
    requireResolveFunction: requireResolveFunction,
    rootDir: rootDir
  });
};
/**
 * Finds the runner to use:
 *
 * 1. looks for jest-runner-<name> relative to project.
 * 1. looks for jest-runner-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */


exports.resolveWatchPlugin = resolveWatchPlugin;

var resolveRunner = function resolveRunner(resolver, _ref4) {
  var filePath = _ref4.filePath,
      rootDir = _ref4.rootDir,
      requireResolveFunction = _ref4.requireResolveFunction;
  return resolveWithPrefix(resolver, {
    filePath: filePath,
    humanOptionName: 'Jest Runner',
    optionName: 'runner',
    prefix: 'jest-runner-',
    requireResolveFunction: requireResolveFunction,
    rootDir: rootDir
  });
};

exports.resolveRunner = resolveRunner;

var resolveSequencer = function resolveSequencer(resolver, _ref5) {
  var filePath = _ref5.filePath,
      rootDir = _ref5.rootDir,
      requireResolveFunction = _ref5.requireResolveFunction;
  return resolveWithPrefix(resolver, {
    filePath: filePath,
    humanOptionName: 'Jest Sequencer',
    optionName: 'testSequencer',
    prefix: 'jest-sequencer-',
    requireResolveFunction: requireResolveFunction,
    rootDir: rootDir
  });
};

exports.resolveSequencer = resolveSequencer;